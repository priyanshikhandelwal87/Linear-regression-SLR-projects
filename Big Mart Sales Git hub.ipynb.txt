{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f27c023c",
   "metadata": {},
   "source": [
    "### Sales Prediction for Big Mart Outlets\n",
    "\n",
    "The data scientists at BigMart have collected 2013 sales data for 1559 products across 10 stores in different cities. Also, certain attributes of each product and store have been defined. **The aim is to build a predictive model and predict the sales of each product at a particular outlet.**\n",
    "\n",
    "Using this model, BigMart will try to understand the properties of products and outlets which play a key role in increasing sales.\n",
    "\n",
    "Please note that the data may have missing values as some stores might not report all the data due to technical glitches. Hence, it will be required to treat them accordingly. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02b9967a",
   "metadata": {},
   "source": [
    "### Exploratory Data Analysis Steps....\n",
    "\n",
    "* Univarate Analysis - Single Variable Analysis (Num: Histograms/Distplot| Cat: Countplot or Frequency Plot)\n",
    "\n",
    "* Bivariate Analysis/Multivariate Analysis \n",
    "    * (Num vs Target(Num): Scatterplot & also Heatmap(Correlation Plot), \n",
    "    * Cat vs Num(Target): **Boxplot**/ViolinPlot/Barplot, \n",
    "    * Cat vs Cat (Target): Crosstab/Frequency - Countplot/Heatmap\n",
    "\n",
    "* Missing Values & Imputation - We are going to deal with the missing values...\n",
    "     * If it is a Numerical Var: Use Mean/Median Imputation\n",
    "     *  Categorical Var - Frequency....\n",
    "     \n",
    "* Outlier Analysis & Treatment\n",
    "\n",
    "* **Feature Engineering**\n",
    "\n",
    "* Encoding and Scaling...Standard Scaler or Min Max Scaler for Scaling and for Categorical Encoding - One Hot Encoding, Label Encoding, Target Encoding and Frequency Encoding...\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "87c5950a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import the required libraries...\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "822ee202",
   "metadata": {},
   "outputs": [],
   "source": [
    "test = pd.read_csv('test.csv')\n",
    "train = pd.read_csv('train.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "74dc0686",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Identifier</th>\n",
       "      <th>Item_Weight</th>\n",
       "      <th>Item_Fat_Content</th>\n",
       "      <th>Item_Visibility</th>\n",
       "      <th>Item_Type</th>\n",
       "      <th>Item_MRP</th>\n",
       "      <th>Outlet_Identifier</th>\n",
       "      <th>Outlet_Establishment_Year</th>\n",
       "      <th>Outlet_Size</th>\n",
       "      <th>Outlet_Location_Type</th>\n",
       "      <th>Outlet_Type</th>\n",
       "      <th>Item_Outlet_Sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>FDA15</td>\n",
       "      <td>9.30</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016047</td>\n",
       "      <td>Dairy</td>\n",
       "      <td>249.8092</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>3735.1380</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>DRC01</td>\n",
       "      <td>5.92</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.019278</td>\n",
       "      <td>Soft Drinks</td>\n",
       "      <td>48.2692</td>\n",
       "      <td>OUT018</td>\n",
       "      <td>2009</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type2</td>\n",
       "      <td>443.4228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>FDN15</td>\n",
       "      <td>17.50</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016760</td>\n",
       "      <td>Meat</td>\n",
       "      <td>141.6180</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>2097.2700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>FDX07</td>\n",
       "      <td>19.20</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Fruits and Vegetables</td>\n",
       "      <td>182.0950</td>\n",
       "      <td>OUT010</td>\n",
       "      <td>1998</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Grocery Store</td>\n",
       "      <td>732.3800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NCD19</td>\n",
       "      <td>8.93</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Household</td>\n",
       "      <td>53.8614</td>\n",
       "      <td>OUT013</td>\n",
       "      <td>1987</td>\n",
       "      <td>High</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>994.7052</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Item_Identifier  Item_Weight Item_Fat_Content  Item_Visibility  \\\n",
       "0           FDA15         9.30          Low Fat         0.016047   \n",
       "1           DRC01         5.92          Regular         0.019278   \n",
       "2           FDN15        17.50          Low Fat         0.016760   \n",
       "3           FDX07        19.20          Regular         0.000000   \n",
       "4           NCD19         8.93          Low Fat         0.000000   \n",
       "\n",
       "               Item_Type  Item_MRP Outlet_Identifier  \\\n",
       "0                  Dairy  249.8092            OUT049   \n",
       "1            Soft Drinks   48.2692            OUT018   \n",
       "2                   Meat  141.6180            OUT049   \n",
       "3  Fruits and Vegetables  182.0950            OUT010   \n",
       "4              Household   53.8614            OUT013   \n",
       "\n",
       "   Outlet_Establishment_Year Outlet_Size Outlet_Location_Type  \\\n",
       "0                       1999      Medium               Tier 1   \n",
       "1                       2009      Medium               Tier 3   \n",
       "2                       1999      Medium               Tier 1   \n",
       "3                       1998         NaN               Tier 3   \n",
       "4                       1987        High               Tier 3   \n",
       "\n",
       "         Outlet_Type  Item_Outlet_Sales  \n",
       "0  Supermarket Type1          3735.1380  \n",
       "1  Supermarket Type2           443.4228  \n",
       "2  Supermarket Type1          2097.2700  \n",
       "3      Grocery Store           732.3800  \n",
       "4  Supermarket Type1           994.7052  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Preview the Dataset...\n",
    "train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ebed60d",
   "metadata": {},
   "source": [
    "### Univariate Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "11353db0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Combined the Dataset\n",
    "combined = pd.concat([train, test], ignore_index = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5916dcf8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((8523, 12), (5681, 11), (14204, 12))"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.shape, test.shape, combined.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7a9702c3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Item_Weight', 'Item_Visibility', 'Item_MRP',\n",
       "       'Outlet_Establishment_Year', 'Item_Outlet_Sales'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# # Find all the Numerical Variables...\n",
    "combined.select_dtypes(include = np.number).columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8969a31d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "num_cols = ['Item_Weight', 'Item_Visibility', \n",
    "            'Item_MRP','Item_Outlet_Sales']\n",
    "\n",
    "nrows = 2 # Number of rows in the plot\n",
    "ncols = 2 # No of Columns for the plot\n",
    "iterator = 1 # Plot Iterator...\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "plt.figure(figsize = (10, 6))\n",
    "for i in num_cols:\n",
    "    plt.subplot(nrows, ncols, iterator)\n",
    "    sns.distplot(combined.loc[:, i])\n",
    "    iterator = iterator+1\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7a0a34ae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Lets Analyse the Target\n",
    "\n",
    "sns.boxplot(combined.Item_Outlet_Sales)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "670b9b5b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Item_Identifier', 'Item_Fat_Content', 'Item_Type', 'Outlet_Identifier',\n",
       "       'Outlet_Size', 'Outlet_Location_Type', 'Outlet_Type'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Cat Vars...\n",
    "\n",
    "combined.select_dtypes(include = \"object\").columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d080c829",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x800 with 6 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cat_cols = ['Item_Fat_Content', \n",
    "            'Item_Type', 'Outlet_Identifier',\n",
    "            'Outlet_Size', 'Outlet_Location_Type', 'Outlet_Type']\n",
    "nrows = 3\n",
    "ncols = 2\n",
    "repeater = 1\n",
    "\n",
    "plt.figure(figsize = (10, 8))\n",
    "for i in cat_cols:\n",
    "    plt.subplot(nrows, ncols, repeater)\n",
    "    combined.loc[:, i].value_counts().plot(kind = \"bar\")\n",
    "    repeater+=1\n",
    "    \n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "369715fb",
   "metadata": {},
   "source": [
    "### Univariate Analysis Inference\n",
    "\n",
    "* Most of the Items that are sold are **Low Fat** Items\n",
    "* The Top 5 Selling Items in the Business are **Fruits & Veggies**, **Snack Foods**, **Household**, **Frozen** and **Dairy**.\n",
    "\n",
    "* Most Seen Outlet Type is **OUT027** and the Less Frequent Outlets in the Business are **OUT010 & OUT019**.\n",
    "\n",
    "* Most of the Outlets built by the company are **Medium** Size Outlets\n",
    "* Most of the Outlets are in **Tier3** Cities followed **Tier-2** and then **Tier-1**\n",
    "\n",
    "* Most of the Outlet Themes are **Supermarket Type 1**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e653f4e8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#combined.Outlet_Identifier.value_counts()\n",
    "\n",
    "# combined.loc[combined.Outlet_Identifier==\"OUT019\", \"Outlet_Type\"].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee16bd5f",
   "metadata": {},
   "source": [
    "### Bivariate Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "26a3446d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x800 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Num vs Num\n",
    "\n",
    "nrows = 2\n",
    "ncols = 2\n",
    "iterator = 1\n",
    "\n",
    "plt.figure(figsize = (12, 8))\n",
    "for i in num_cols:\n",
    "    plt.subplot(nrows, ncols, iterator)\n",
    "    plt.scatter(combined.loc[:, i], \n",
    "                    combined.Item_Outlet_Sales)\n",
    "    plt.title(i)\n",
    "    iterator+=1\n",
    "    \n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b44cb1d5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fix the Item Fat Content\n",
    "\n",
    "combined.Item_Fat_Content.replace(to_replace = [\"low fat\", \"LF\",\"reg\"],\n",
    "                                 value = [\"Low Fat\", \"Low Fat\", \"Regular\"],\n",
    "                                 inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "5fbe850a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x1000 with 6 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Cat vs Num\n",
    "\n",
    "nrows = 3\n",
    "ncols = 2\n",
    "rep = 1\n",
    "\n",
    "plt.figure(figsize = (10, 10))\n",
    "for i in cat_cols:\n",
    "    plt.subplot(nrows, ncols, rep)\n",
    "    sns.boxplot(data = combined, \n",
    "                x = i, y = \"Item_Outlet_Sales\")\n",
    "    plt.xticks(rotation = 90)\n",
    "    rep+=1\n",
    "    \n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba6c8fea",
   "metadata": {},
   "source": [
    "### Revision\n",
    "\n",
    "1. What is the Average Sales\n",
    "2. What is the 95% values of Sales.\n",
    "3. Identify the Product that sells the Most\n",
    "4. Find the Middle most observation for the MRP\n",
    "5. Compare the Mean and Trimmed Mean of Sales\n",
    "6. What percentage of Dairy Items are in the Data.\n",
    "7. Which Product as the highest variation in Sales\n",
    "8. What is the Range of Middle 50% of ITEM MRP\n",
    "9. Are there any variables that should be excluded from the Model Building\n",
    "10. Find Percentage of Variation in Item Weight for each Product\n",
    "11. Is there any variable that is Normally Distributed\n",
    "12. Identify the most visible Outlet Type for the Business\n",
    "13. Do we have negatively skewed feature/Column in the Dataset\n",
    "14. Find the Kurtosis of all the variables.\n",
    "15. Identify the Presence of Extreme Values in the Dataset\n",
    "16. Is there any effect of MRP on the Price?\n",
    "17. Transform Item Outlet Sales such that the Mean is 0 and Standard Deviation is 1 \n",
    "18. Transform the Sales in such a way that the range is 1\n",
    "19. Check Skewness of Item Outlet Sales and find out how to reduce the skewness"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "2a11bf5f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Sales:  2181.288913575032\n",
      "95% Sales Values: 5522.811\n"
     ]
    }
   ],
   "source": [
    "# What is the Average Sales\n",
    "print(\"Mean Sales: \", combined.Item_Outlet_Sales.mean())\n",
    "\n",
    "# What is the 95% values of Sales.\n",
    "print(\"95% Sales Values:\", combined.Item_Outlet_Sales.quantile(0.95))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "47dce4d3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Fruits and Vegetables'"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Identify the Product that sells the Most\n",
    "\n",
    "combined.Item_Type.mode()[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "a4297d8b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "142.247"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Find the Middle most observation for the MRP\n",
    "\n",
    "combined.Item_MRP.median()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "b14908ae",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean: 2181.288913575032\n",
      "Trimmed Mean 2138.3762353405964\n",
      "0.07997747113489158\n"
     ]
    }
   ],
   "source": [
    "# Compare the Mean and Trimmed Mean of Sales\n",
    "print(\"mean:\", combined.Item_Outlet_Sales.mean())\n",
    "\n",
    "import scipy.stats as stats # Statistical Library....\n",
    "trimmed_mean = stats.trim_mean(train.Item_Outlet_Sales, \n",
    "                               proportiontocut=0.01)\n",
    "\n",
    "print(\"Trimmed Mean\",trimmed_mean)\n",
    "\n",
    "# What percentage of Dairy Items are in the Data.\n",
    "print(combined.loc[combined.Item_Type==\"Dairy\"]\\\n",
    "      .shape[0]/combined.shape[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "448e4e15",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "IQR RANGE:  91.84360000000001\n"
     ]
    }
   ],
   "source": [
    "# Which Product as the highest variation in Sales\n",
    "combined.groupby(\"Item_Type\")[\"Item_Outlet_Sales\"].std()\n",
    "\n",
    "# What is the Range of Middle 50% of ITEM MRP\n",
    "q3 = combined.Item_MRP.quantile(0.75)\n",
    "q1 = combined.Item_MRP.quantile(0.25)\n",
    "print(\"IQR RANGE: \", q3-q1)\n",
    "\n",
    "# Are there any variables that should be excluded from the \n",
    "# Model Building\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "d470eb5a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<pandas.core.groupby.generic.SeriesGroupBy object at 0x000001D4F88E4450>"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# # Find Percentage of Variation in Item Weight for each Product\n",
    "\n",
    "combined.groupby(\"Item_Type\")[\"Item_Weight\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "66b08f3c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CV for Dairy 0.3522131559667399\n",
      "CV for Soft Drinks 0.3739373755063592\n",
      "CV for Meat 0.3642790439914629\n",
      "CV for Fruits and Vegetables 0.3461973859651611\n",
      "CV for Household 0.37318900890557627\n",
      "CV for Baking Goods 0.386543702138451\n",
      "CV for Snack Foods 0.35344333082714774\n",
      "CV for Frozen Foods 0.3590288949024649\n",
      "CV for Breakfast 0.3958751726877383\n",
      "CV for Health and Hygiene 0.34551534644867565\n",
      "CV for Hard Drinks 0.36538886491627415\n",
      "CV for Canned 0.37480312491089957\n",
      "CV for Breads 0.4153469410839404\n",
      "CV for Starchy Foods 0.3097804421422045\n",
      "CV for Others 0.2959160504964309\n",
      "CV for Seafood 0.41326207322300035\n"
     ]
    }
   ],
   "source": [
    "for i in combined.Item_Type.unique():\n",
    "    mean_=  combined.loc[combined.Item_Type==i, \"Item_Weight\"].mean()\n",
    "    std_ = combined.loc[combined.Item_Type==i, \"Item_Weight\"].std()\n",
    "    print(\"CV for\", i,std_/mean_)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37cda76f",
   "metadata": {},
   "source": [
    "### Scaling\n",
    "\n",
    "* Standard Scaler\n",
    "Standard Scaler is one of the popular techniques used for Scaling in the Data Science Fraternity. It involves calculating the mean & std of all the numerical columns and then using **Z score to convert the data into Standard Normal Distribution where the Mean of all the Columns is equal to 0 and Standard Deviation is 1.**\n",
    "\n",
    "### Normalization\n",
    "\n",
    "* It is another technique used to scale the data in such a way where the Min of each Column is Equal to 0 and the Max of each column is equal to 1.\n",
    "\n",
    "* Since, it takes the range in denominator, thus, it is very much influenced by the presence of the Outliers in the data. Therefore Min Max Scaler is not a very effective technique in scaling the data.\n",
    "\n",
    "Note: Standard Scaler is quite versatile in nature as it can handle the presence of Outliers well. \n",
    "\n",
    "Note2: However, in the presence of outliers in the data, one must apply **ROBUST SCALER** to scale the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "c4d27a14",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Weight</th>\n",
       "      <th>Item_Visibility</th>\n",
       "      <th>Item_MRP</th>\n",
       "      <th>Item_Outlet_Sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>7060.000000</td>\n",
       "      <td>8523.000000</td>\n",
       "      <td>8523.000000</td>\n",
       "      <td>8523.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>12.857645</td>\n",
       "      <td>0.066132</td>\n",
       "      <td>140.992782</td>\n",
       "      <td>2181.288914</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>4.643456</td>\n",
       "      <td>0.051598</td>\n",
       "      <td>62.275067</td>\n",
       "      <td>1706.499616</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>4.555000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>31.290000</td>\n",
       "      <td>33.290000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>8.773750</td>\n",
       "      <td>0.026989</td>\n",
       "      <td>93.826500</td>\n",
       "      <td>834.247400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>12.600000</td>\n",
       "      <td>0.053931</td>\n",
       "      <td>143.012800</td>\n",
       "      <td>1794.331000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>16.850000</td>\n",
       "      <td>0.094585</td>\n",
       "      <td>185.643700</td>\n",
       "      <td>3101.296400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>21.350000</td>\n",
       "      <td>0.328391</td>\n",
       "      <td>266.888400</td>\n",
       "      <td>13086.964800</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Item_Weight  Item_Visibility     Item_MRP  Item_Outlet_Sales\n",
       "count  7060.000000      8523.000000  8523.000000        8523.000000\n",
       "mean     12.857645         0.066132   140.992782        2181.288914\n",
       "std       4.643456         0.051598    62.275067        1706.499616\n",
       "min       4.555000         0.000000    31.290000          33.290000\n",
       "25%       8.773750         0.026989    93.826500         834.247400\n",
       "50%      12.600000         0.053931   143.012800        1794.331000\n",
       "75%      16.850000         0.094585   185.643700        3101.296400\n",
       "max      21.350000         0.328391   266.888400       13086.964800"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.loc[:, num_cols].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "98e008af",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler, MinMaxScaler\n",
    "\n",
    "sc = StandardScaler() # Machine Instance "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "cebba42d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Scale the Data....\n",
    "# sc = (xi-mean)/sd\n",
    "\n",
    "# .fit() will only learn the mean & std\n",
    "# .fit_transform() will not only learn the mean & std but also convert\n",
    "\n",
    "scaled = sc.fit_transform(pd.DataFrame(combined.Item_MRP))\n",
    "\n",
    "# Note: sc takes data in 2D format and hence, \n",
    "# I need to supply the DataFrame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "2c41c52b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ZScore   -1.386919e-16\n",
      "dtype: float64\n",
      "ZScore    1.000035\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print(pd.DataFrame(scaled, columns=[\"ZScore\"]).mean())\n",
    "print(pd.DataFrame(scaled, columns=[\"ZScore\"]).std())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "9c9b53b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Apply Standard Scaler on the Whole Data\n",
    "\n",
    "sc = StandardScaler()\n",
    "\n",
    "scaled = sc.fit_transform(combined.loc[:, num_cols])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "e2e5b5e3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Weight</th>\n",
       "      <th>Item_Visibility</th>\n",
       "      <th>Item_MRP</th>\n",
       "      <th>Item_Outlet_Sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1.176500e+04</td>\n",
       "      <td>1.420400e+04</td>\n",
       "      <td>1.420400e+04</td>\n",
       "      <td>8.523000e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>-1.449471e-17</td>\n",
       "      <td>-5.602703e-17</td>\n",
       "      <td>-1.386919e-16</td>\n",
       "      <td>1.635049e-16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.000043e+00</td>\n",
       "      <td>1.000035e+00</td>\n",
       "      <td>1.000035e+00</td>\n",
       "      <td>1.000059e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-1.770704e+00</td>\n",
       "      <td>-1.281712e+00</td>\n",
       "      <td>-1.767181e+00</td>\n",
       "      <td>-1.258790e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>-8.775982e-01</td>\n",
       "      <td>-7.563065e-01</td>\n",
       "      <td>-7.569166e-01</td>\n",
       "      <td>-7.894057e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>-4.145348e-02</td>\n",
       "      <td>-2.318886e-01</td>\n",
       "      <td>2.000528e-02</td>\n",
       "      <td>-2.267687e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>8.505775e-01</td>\n",
       "      <td>5.457876e-01</td>\n",
       "      <td>7.224096e-01</td>\n",
       "      <td>5.391513e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.839335e+00</td>\n",
       "      <td>5.100167e+00</td>\n",
       "      <td>2.027606e+00</td>\n",
       "      <td>6.391045e+00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Item_Weight  Item_Visibility      Item_MRP  Item_Outlet_Sales\n",
       "count  1.176500e+04     1.420400e+04  1.420400e+04       8.523000e+03\n",
       "mean  -1.449471e-17    -5.602703e-17 -1.386919e-16       1.635049e-16\n",
       "std    1.000043e+00     1.000035e+00  1.000035e+00       1.000059e+00\n",
       "min   -1.770704e+00    -1.281712e+00 -1.767181e+00      -1.258790e+00\n",
       "25%   -8.775982e-01    -7.563065e-01 -7.569166e-01      -7.894057e-01\n",
       "50%   -4.145348e-02    -2.318886e-01  2.000528e-02      -2.267687e-01\n",
       "75%    8.505775e-01     5.457876e-01  7.224096e-01       5.391513e-01\n",
       "max    1.839335e+00     5.100167e+00  2.027606e+00       6.391045e+00"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(scaled, columns = num_cols).describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "b6d48384",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Min Max Scaler\n",
    "\n",
    "mmax = MinMaxScaler()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "453472f8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Item_Weight          0.0\n",
       "Item_Visibility      0.0\n",
       "Item_MRP             0.0\n",
       "Item_Outlet_Sales    0.0\n",
       "dtype: float64"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(mmax.fit_transform(combined.loc[:, num_cols]), \n",
    "            columns = num_cols).min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "e4966222",
   "metadata": {},
   "outputs": [],
   "source": [
    "def minmax(df, xi):\n",
    "    return((df[xi]-min(df[xi]))/(max(df[xi])-min(df[xi])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "8be41ae5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    14204.000000\n",
       "mean         0.465686\n",
       "std          0.263529\n",
       "min          0.000000\n",
       "25%          0.266224\n",
       "50%          0.470958\n",
       "75%          0.656055\n",
       "max          1.000000\n",
       "Name: Item_MRP, dtype: float64"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "minmax(combined, \"Item_MRP\").describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9bd8cba",
   "metadata": {},
   "source": [
    "#### Transformation\n",
    "\n",
    "**Why Transform**\n",
    "\n",
    "* The Purpose of Transformation is to reduce the **SKEWNESS** in the data.\n",
    "\n",
    "* Most of the Statistical Models have an assumption about the data that it should be Normally Distributed/Gaussian Curve.\n",
    "\n",
    "* We can apply some of the transformation techniques to reduce the skewness in the data\n",
    "\n",
    "* Those Techniques are as follows:\n",
    "\n",
    "    * Log Transformation\n",
    "    * SQRT Transformation\n",
    "    * Cube Root\n",
    "    * Reciprocal\n",
    "    * Box-Cox\n",
    "    * Yeo-JohnSon"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "a5d88715",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.1775306028542796\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Without Transformation\n",
    "sns.distplot(train.Item_Outlet_Sales)\n",
    "print(train.Item_Outlet_Sales.skew())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "4d841019",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-0.887753343209305\n"
     ]
    },
    {
     "data": {
      "image/png": "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v/8+brzxRnh7e8PX1xcTJkzAl19+ed3P89PX2BPd+fp8/PHHGD16NLRaLXx9fZGUlISnnnqqx1mIqGdYbojI7pYvX45Fixbh/vvvx7Fjx3Dw4EGMHz8e06dPx1//+lfR8brk22+/xQMPPIB7770XBw8eREZGBl566SUYjUbR0Yio10+vIiJh5s6dK02fPl2aO3duh4PtcnJyJEmSpFOnTklTpkyRvL29pdDQUOmhhx6SysrK2p5j4sSJ0hNPPCEtWbJE8vf3l0JDQ6X169dLdXV10rx58yQfHx+pT58+0tatW7uU6YcffpAASG+++WaH9y1btkxSqVRSfn6+JEmS9Pzzz0vDhg1r95jXX39diouLa3v/5a9rx44dUk5OjgRAyszMbPu4q73Oq319rmTJkiXSzTfffNXHnD9/Xvr5z38uhYaGSt7e3tKoUaOk9PT0do+Ji4uTXn/99ba/V1dXS4888ogUEhIi+fr6Srfccot09OjRtvcfPXpUuvnmmyUfHx/J19dXGjlypHTo0KGr5iByNxy5IXIDb7zxBlJTU/HII49Ap9NBp9MhJiYGOp0OEydOxPDhw3H48GF88803KCkpwf3339/u499//30EBwfj4MGD+OUvf4n/+Z//wX333YcxY8bgyJEjmDx5MmbPno2GhoZrZvnwww/h4+ODRYsWdXjfU089BZPJhI8//rhLr2v58uW4//77cccdd7S9rjFjxnR43LVe55W+PlcTHh6OU6dO4eTJk1d8TF1dHaZOnYpvv/0WmZmZmDx5MqZNm4b8/PxOHy9JEu68804UFxdj69atyMjIwMiRIzFp0iRUVlYCAH7xi18gOjoahw4dQkZGBp555hmoVKoufb2I3IbodkVEvad15EaSmkdglixZ0u79//u//yulpaW1u1ZQUCABkM6cOdP2cePGjWt7v9lslry9vaXZs2e3XdPpdBIA6YcffrhmpjvuuKPDaMxPabVa6X/+538kSbr2yM3lr7HV5SM3XX2dl399rqaurk6aOnWqBECKi4uTZs6cKb3zzjtSU1PTVT9u8ODB0l/+8pe2v/905Oa7776T/Pz8OjxH3759pfXr10uSJEm+vr7Se++91+WcRO6IIzdEbiwjIwM7duyAj49P29ugQYMAABcuXGh73NChQ9v+rFAoEBQUhCFDhrRdCwsLAwCUlpb2OJMkSZDJZD1+np/q6uu8Ht7e3vjqq69w/vx5PPfcc/Dx8cFTTz2FG2+8sW0Eq76+Hr/+9a8xePBg+Pv7w8fHB6dPn77iyE1GRgbq6uoQFBTULmtOTk5bzmXLlmHhwoW47bbb8Morr3Q7P5ErU4oOQETiWK1WTJs2DX/84x87vC8iIqLtz5dPe8hksnbXWsuI1Wq95uccMGAA9u7dC6PRCLVa3e59RUVF0Ov16N+/PwBALpdDkqR2jzGZTNf8HJfr6uvsjr59+6Jv375YuHAhnn32WQwYMABbtmzBww8/jKeffhrbtm3Dq6++in79+sHT0xP33nvvFRcdW61WREREYOfOnR3e5+/vDwB44YUXMGvWLHz11Vf4+uuv8fzzz+Ojjz7CXXfd1aPXQeRKWG6I3IRarYbFYml3beTIkfj4448RHx8PpdI+3w4eeOABvPnmm1i/fj1++ctftnvfq6++CpVKhXvuuQcAEBISguLi4najOZfvXdPZ67pcV15nV57nWuLj4+Hl5YX6+noAwJ49ezBv3ry24lFXV4fc3Nyr5iwuLoZSqUR8fPwVHzdgwAAMGDAATz75JB588EFs3LiR5YboJzgtReQm4uPjceDAAeTm5qK8vBxWqxWPP/44Kisr8eCDD+LgwYO4ePEitm/fjvnz5/f4B/2VpKamYsmSJXj66afx2muv4cKFCzh9+jSee+45vPHGG3jttdfaFvPefPPNKCsrw5/+9CdcuHABf/vb3/D11193eF3Hjx/HmTNnUF5e3unITldeZ2dfn6t54YUX8Otf/xo7d+5ETk4OMjMzMX/+fJhMJtx+++0AgH79+uGTTz7B0aNHcezYMcyaNeuqz3vbbbchNTUVM2bMwLZt25Cbm4v9+/fjueeew+HDh9HY2IgnnngCO3fuRF5eHvbt24dDhw4hMTHxuv4NiFwdyw2Rm1i+fDkUCgUGDx6MkJAQ5OfnIzIyEvv27YPFYsHkyZORnJyMJUuWQKvVQi7vvW8Pa9aswdq1a/HRRx9hyJAhSElJwa5du/DZZ5+1G81JTEzE2rVr8be//Q3Dhg3DwYMHsXz58nbP9cgjj2DgwIEYNWoUQkJCsG/fvg6fryuvs7Ovz9VMnDgRFy9exJw5czBo0CBMmTIFxcXF2L59OwYOHAgAeP311xEQEIAxY8Zg2rRpmDx5MkaOHHnF55TJZNi6dSsmTJiA+fPnY8CAAXjggQeQm5uLsLAwKBQKVFRUYM6cORgwYADuv/9+TJkyBS+++GKXv/ZE7kAmXT6hTUREROTEOHJDRERELoXlhohsavHixe1uY/7p2+LFi0XH6zJXeR1E7ojTUkRkU6WlpdDr9Z2+z8/PD6GhoXZO1D2u8jqI3BHLDREREbkUTksRERGRS2G5ISIiIpfCckNEREQuheWGiIiIXArLDREREbkUlhsiIiJyKSw3RERE5FJYboiIiMil/D+y47yIKbkyMQAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Apply Log Transformation\n",
    "sns.distplot(np.log(train.Item_Outlet_Sales))\n",
    "print(np.log(train.Item_Outlet_Sales).skew())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "5a3cd58a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0851408216698326\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Apply SQRT Transformation\n",
    "sns.distplot(np.sqrt(train.Item_Outlet_Sales))\n",
    "print(np.sqrt(train.Item_Outlet_Sales.skew()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "b8ba5c10",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-0.10250699736722735\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Apply CUBEROOT Transformation\n",
    "sns.distplot(np.cbrt(train.Item_Outlet_Sales))\n",
    "print(np.cbrt(train.Item_Outlet_Sales).skew())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "b6b1daa6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5.679237323396784\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Apply Recirpocal Transformation\n",
    "sns.distplot(np.reciprocal(train.Item_Outlet_Sales))\n",
    "print(np.reciprocal(train.Item_Outlet_Sales).skew())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba9744f6",
   "metadata": {},
   "source": [
    "### Box Cox Transformation & Yeo-Johnson Transformation\n",
    "\n",
    "* BoxCox Transformation works on transforming the Positive Values(greater than 0) only as the function entails usage of Log Transformation as per the formula if the function encounters 0 in the data.\n",
    "\n",
    "* Where as the YeoJohnson Function can work on any number be it 0, -ve or +ve number. In totality, the Yeo Johnson is more flexible and a versatile transformation bet on the data.."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "622e6a04",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-0.0749649223767276\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# use scipy.stats \n",
    "\n",
    "sns.distplot(stats.boxcox(train.Item_Outlet_Sales)[0])\n",
    "print(stats.skew(stats.boxcox(train.Item_Outlet_Sales)[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "298c054a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-0.07477744470274916\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# use Yeo Johnson\n",
    "\n",
    "sns.distplot(stats.yeojohnson(train.Item_Outlet_Sales)[0])\n",
    "print(stats.skew(stats.yeojohnson(train.Item_Outlet_Sales)[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "8d037b93",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([ 31.07413761,  80.56195565, 157.18079953,   0.        ,\n",
       "        -81.46815947]),\n",
       " 1.1280463185584948)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.yeojohnson([23, 54, 98, 0, -134])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "397d9a9d",
   "metadata": {},
   "source": [
    "### Missing Values\n",
    "\n",
    "* Rule says if 95% or more data is missing in the column, then it is best to drop that column.   \n",
    "\n",
    "Note: This is a theoretical rule. The point is to find the pattern in the data in such a way that you can handle most of the missing values in the data....\n",
    "\n",
    "* Now, basis discussion, we see that prima facie, we can consider the mode of the categorical variable & Median in Numerical Variable to impute the missing value. \n",
    "\n",
    "* However, this approach might not work because we have not explore the pattern from the rest of the columns/features.\n",
    "\n",
    "* Therefore, we need to do the pattern exploration on priority to find out the closest possible pattern for the missing value and then impute it accordingly,\n",
    "\n",
    "* In the event of the pattern not being available or unable to mine the pattern, its always good to build the model and deal with the missing values accordingly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "e9d421ab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Item_Identifier                 0\n",
       "Item_Weight                  2439\n",
       "Item_Fat_Content                0\n",
       "Item_Visibility                 0\n",
       "Item_Type                       0\n",
       "Item_MRP                        0\n",
       "Outlet_Identifier               0\n",
       "Outlet_Establishment_Year       0\n",
       "Outlet_Size                  4016\n",
       "Outlet_Location_Type            0\n",
       "Outlet_Type                     0\n",
       "Item_Outlet_Sales            5681\n",
       "dtype: int64"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "312de997",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((8523, 12), (5681, 11))"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.shape, test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "b6118015",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['OUT010', 'OUT045', 'OUT017'], dtype=object)"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Outlet size is missing\n",
    "combined.loc[combined.Outlet_Size.isnull(), \"Outlet_Identifier\"].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "66e9f750",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Medium'"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Find the Mode of Outlet Type\n",
    "combined.Outlet_Size.mode()[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "4b24924b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Identifier</th>\n",
       "      <th>Item_Weight</th>\n",
       "      <th>Item_Fat_Content</th>\n",
       "      <th>Item_Visibility</th>\n",
       "      <th>Item_Type</th>\n",
       "      <th>Item_MRP</th>\n",
       "      <th>Outlet_Identifier</th>\n",
       "      <th>Outlet_Establishment_Year</th>\n",
       "      <th>Outlet_Size</th>\n",
       "      <th>Outlet_Location_Type</th>\n",
       "      <th>Outlet_Type</th>\n",
       "      <th>Item_Outlet_Sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>FDC37</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.057557</td>\n",
       "      <td>Baking Goods</td>\n",
       "      <td>107.6938</td>\n",
       "      <td>OUT019</td>\n",
       "      <td>1985</td>\n",
       "      <td>Small</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Grocery Store</td>\n",
       "      <td>214.3876</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>FDC14</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.072222</td>\n",
       "      <td>Canned</td>\n",
       "      <td>43.6454</td>\n",
       "      <td>OUT019</td>\n",
       "      <td>1985</td>\n",
       "      <td>Small</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Grocery Store</td>\n",
       "      <td>125.8362</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Item_Identifier  Item_Weight Item_Fat_Content  Item_Visibility  \\\n",
       "23           FDC37          NaN          Low Fat         0.057557   \n",
       "29           FDC14          NaN          Regular         0.072222   \n",
       "\n",
       "       Item_Type  Item_MRP Outlet_Identifier  Outlet_Establishment_Year  \\\n",
       "23  Baking Goods  107.6938            OUT019                       1985   \n",
       "29        Canned   43.6454            OUT019                       1985   \n",
       "\n",
       "   Outlet_Size Outlet_Location_Type    Outlet_Type  Item_Outlet_Sales  \n",
       "23       Small               Tier 1  Grocery Store           214.3876  \n",
       "29       Small               Tier 1  Grocery Store           125.8362  "
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined.loc[combined.Outlet_Identifier==\"OUT019\", ].head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "23a4e740",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Imputting the 'Small' in OUT010\n",
    "combined.loc[(combined.Outlet_Identifier==\"OUT010\")&\\\n",
    "             (combined.Outlet_Size.isnull()), \"Outlet_Size\"] = \"Small\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "12aedff0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Supermarket Type1'], dtype=object)"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Missing Outlets are 45 & 17\n",
    "# 45 ~ S1\n",
    "# 17 ~ S1\n",
    "combined.loc[combined.Outlet_Identifier==\"OUT045\", \n",
    "             \"Outlet_Type\"].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "93d42fab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Small'"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Lets find out the Outlet Size where the Type is S1\n",
    "combined.loc[combined.Outlet_Type==\"Supermarket Type1\", \n",
    "             \"Outlet_Size\"].mode()[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "b55d8e3c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Outlet_Identifier  Outlet_Type        Outlet_Size\n",
       "OUT010             Grocery Store      Small           925\n",
       "OUT013             Supermarket Type1  High           1553\n",
       "OUT018             Supermarket Type2  Medium         1546\n",
       "OUT019             Grocery Store      Small           880\n",
       "OUT027             Supermarket Type3  Medium         1559\n",
       "OUT035             Supermarket Type1  Small          1550\n",
       "OUT046             Supermarket Type1  Small          1550\n",
       "OUT049             Supermarket Type1  Medium         1550\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined.groupby([\"Outlet_Identifier\", \"Outlet_Type\"])\\\n",
    "[\"Outlet_Size\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "e80cc86d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Imputting Small in Remaining Data\n",
    "\n",
    "combined.loc[combined.Outlet_Size.isnull(), \n",
    "             \"Outlet_Size\"] = \"Small\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "2a55a1ea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(combined.loc[:, num_cols].corr(), annot = True,\n",
    "            cmap = \"summer\",vmax=1,vmin=-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "910c0014",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Identifier</th>\n",
       "      <th>Item_Weight</th>\n",
       "      <th>Item_Fat_Content</th>\n",
       "      <th>Item_Visibility</th>\n",
       "      <th>Item_Type</th>\n",
       "      <th>Item_MRP</th>\n",
       "      <th>Outlet_Identifier</th>\n",
       "      <th>Outlet_Establishment_Year</th>\n",
       "      <th>Outlet_Size</th>\n",
       "      <th>Outlet_Location_Type</th>\n",
       "      <th>Outlet_Type</th>\n",
       "      <th>Item_Outlet_Sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>FDA15</td>\n",
       "      <td>9.30</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016047</td>\n",
       "      <td>Dairy</td>\n",
       "      <td>249.8092</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>3735.1380</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>DRC01</td>\n",
       "      <td>5.92</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.019278</td>\n",
       "      <td>Soft Drinks</td>\n",
       "      <td>48.2692</td>\n",
       "      <td>OUT018</td>\n",
       "      <td>2009</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type2</td>\n",
       "      <td>443.4228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>FDN15</td>\n",
       "      <td>17.50</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016760</td>\n",
       "      <td>Meat</td>\n",
       "      <td>141.6180</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>2097.2700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>FDX07</td>\n",
       "      <td>19.20</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Fruits and Vegetables</td>\n",
       "      <td>182.0950</td>\n",
       "      <td>OUT010</td>\n",
       "      <td>1998</td>\n",
       "      <td>Small</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Grocery Store</td>\n",
       "      <td>732.3800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NCD19</td>\n",
       "      <td>8.93</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Household</td>\n",
       "      <td>53.8614</td>\n",
       "      <td>OUT013</td>\n",
       "      <td>1987</td>\n",
       "      <td>High</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>994.7052</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Item_Identifier  Item_Weight Item_Fat_Content  Item_Visibility  \\\n",
       "0           FDA15         9.30          Low Fat         0.016047   \n",
       "1           DRC01         5.92          Regular         0.019278   \n",
       "2           FDN15        17.50          Low Fat         0.016760   \n",
       "3           FDX07        19.20          Regular         0.000000   \n",
       "4           NCD19         8.93          Low Fat         0.000000   \n",
       "\n",
       "               Item_Type  Item_MRP Outlet_Identifier  \\\n",
       "0                  Dairy  249.8092            OUT049   \n",
       "1            Soft Drinks   48.2692            OUT018   \n",
       "2                   Meat  141.6180            OUT049   \n",
       "3  Fruits and Vegetables  182.0950            OUT010   \n",
       "4              Household   53.8614            OUT013   \n",
       "\n",
       "   Outlet_Establishment_Year Outlet_Size Outlet_Location_Type  \\\n",
       "0                       1999      Medium               Tier 1   \n",
       "1                       2009      Medium               Tier 3   \n",
       "2                       1999      Medium               Tier 1   \n",
       "3                       1998       Small               Tier 3   \n",
       "4                       1987        High               Tier 3   \n",
       "\n",
       "         Outlet_Type  Item_Outlet_Sales  \n",
       "0  Supermarket Type1          3735.1380  \n",
       "1  Supermarket Type2           443.4228  \n",
       "2  Supermarket Type1          2097.2700  \n",
       "3      Grocery Store           732.3800  \n",
       "4  Supermarket Type1           994.7052  "
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "26799c24",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1        5.92\n",
       "2272     5.92\n",
       "2927      NaN\n",
       "5029     5.92\n",
       "5077     5.92\n",
       "5218     5.92\n",
       "9453     5.92\n",
       "10588    5.92\n",
       "12787    5.92\n",
       "Name: Item_Weight, dtype: float64"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined.loc[combined.Item_Identifier==\"DRC01\", \"Item_Weight\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "02079059",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2439"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Item Weight and Sales...\n",
    "\n",
    "combined.Item_Weight.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "c32408d8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Identifier</th>\n",
       "      <th>Item_Weight</th>\n",
       "      <th>Item_Fat_Content</th>\n",
       "      <th>Item_Visibility</th>\n",
       "      <th>Item_Type</th>\n",
       "      <th>Item_MRP</th>\n",
       "      <th>Outlet_Identifier</th>\n",
       "      <th>Outlet_Establishment_Year</th>\n",
       "      <th>Outlet_Size</th>\n",
       "      <th>Outlet_Location_Type</th>\n",
       "      <th>Outlet_Type</th>\n",
       "      <th>Item_Outlet_Sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>FDP10</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.12747</td>\n",
       "      <td>Snack Foods</td>\n",
       "      <td>107.7622</td>\n",
       "      <td>OUT027</td>\n",
       "      <td>1985</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type3</td>\n",
       "      <td>4022.7636</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Item_Identifier  Item_Weight Item_Fat_Content  Item_Visibility    Item_Type  \\\n",
       "7           FDP10          NaN          Low Fat          0.12747  Snack Foods   \n",
       "\n",
       "   Item_MRP Outlet_Identifier  Outlet_Establishment_Year Outlet_Size  \\\n",
       "7  107.7622            OUT027                       1985      Medium   \n",
       "\n",
       "  Outlet_Location_Type        Outlet_Type  Item_Outlet_Sales  \n",
       "7               Tier 3  Supermarket Type3          4022.7636  "
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined.loc[combined.Item_Weight.isnull()].head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "23e8ab84",
   "metadata": {},
   "outputs": [],
   "source": [
    "combined.loc[7, \"Item_Weight\"] =combined.loc\\\n",
    "[combined.Item_Identifier==\"FDP10\", \"Item_Weight\"].median()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "29e237f8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2438"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined.Item_Weight.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "2c76b188",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0         9.30\n",
       "1         5.92\n",
       "2        17.50\n",
       "3        19.20\n",
       "4         8.93\n",
       "         ...  \n",
       "14199    10.50\n",
       "14200     7.60\n",
       "14201    10.00\n",
       "14202    15.30\n",
       "14203     9.50\n",
       "Name: Item_Weight, Length: 14204, dtype: float64"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined.loc[:,\"Item_Weight\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "bc76a3ab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        FDA15\n",
       "1        DRC01\n",
       "2        FDN15\n",
       "3        FDX07\n",
       "4        NCD19\n",
       "         ...  \n",
       "14199    FDB58\n",
       "14200    FDD47\n",
       "14201    NCO17\n",
       "14202    FDJ26\n",
       "14203    FDU37\n",
       "Name: Item_Identifier, Length: 14204, dtype: object"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined.loc[:,\"Item_Identifier\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8e68cb91",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "a91ba236",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Length of values (1559) does not match length of index (14204)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[157], line 3\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m# Lambda - very straight forward approach\u001b[39;00m\n\u001b[1;32m----> 3\u001b[0m combined[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mItem_Weight\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39mcombined\u001b[38;5;241m.\u001b[39mgroupby(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mItem_Identifier\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m      4\u001b[0m [\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mItem_Weight\u001b[39m\u001b[38;5;124m\"\u001b[39m]\u001b[38;5;241m.\u001b[39mapply(\u001b[38;5;28;01mlambda\u001b[39;00m x:x\u001b[38;5;241m.\u001b[39mfillna(x\u001b[38;5;241m.\u001b[39mmedian()))\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\frame.py:3950\u001b[0m, in \u001b[0;36mDataFrame.__setitem__\u001b[1;34m(self, key, value)\u001b[0m\n\u001b[0;32m   3947\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_setitem_array([key], value)\n\u001b[0;32m   3948\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m   3949\u001b[0m     \u001b[38;5;66;03m# set column\u001b[39;00m\n\u001b[1;32m-> 3950\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_set_item(key, value)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\frame.py:4143\u001b[0m, in \u001b[0;36mDataFrame._set_item\u001b[1;34m(self, key, value)\u001b[0m\n\u001b[0;32m   4133\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_set_item\u001b[39m(\u001b[38;5;28mself\u001b[39m, key, value) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m   4134\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m   4135\u001b[0m \u001b[38;5;124;03m    Add series to DataFrame in specified column.\u001b[39;00m\n\u001b[0;32m   4136\u001b[0m \n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m   4141\u001b[0m \u001b[38;5;124;03m    ensure homogeneity.\u001b[39;00m\n\u001b[0;32m   4142\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[1;32m-> 4143\u001b[0m     value \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_sanitize_column(value)\n\u001b[0;32m   4145\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m (\n\u001b[0;32m   4146\u001b[0m         key \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns\n\u001b[0;32m   4147\u001b[0m         \u001b[38;5;129;01mand\u001b[39;00m value\u001b[38;5;241m.\u001b[39mndim \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m\n\u001b[0;32m   4148\u001b[0m         \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m is_extension_array_dtype(value)\n\u001b[0;32m   4149\u001b[0m     ):\n\u001b[0;32m   4150\u001b[0m         \u001b[38;5;66;03m# broadcast across multiple columns if necessary\u001b[39;00m\n\u001b[0;32m   4151\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m.\u001b[39mis_unique \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns, MultiIndex):\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\frame.py:4870\u001b[0m, in \u001b[0;36mDataFrame._sanitize_column\u001b[1;34m(self, value)\u001b[0m\n\u001b[0;32m   4867\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m _reindex_for_setitem(Series(value), \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mindex)\n\u001b[0;32m   4869\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_list_like(value):\n\u001b[1;32m-> 4870\u001b[0m     com\u001b[38;5;241m.\u001b[39mrequire_length_match(value, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mindex)\n\u001b[0;32m   4871\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m sanitize_array(value, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mindex, copy\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m, allow_2d\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\common.py:576\u001b[0m, in \u001b[0;36mrequire_length_match\u001b[1;34m(data, index)\u001b[0m\n\u001b[0;32m    572\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m    573\u001b[0m \u001b[38;5;124;03mCheck the length of data matches the length of the index.\u001b[39;00m\n\u001b[0;32m    574\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m    575\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(data) \u001b[38;5;241m!=\u001b[39m \u001b[38;5;28mlen\u001b[39m(index):\n\u001b[1;32m--> 576\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m    577\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mLength of values \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    578\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m(\u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlen\u001b[39m(data)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m) \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    579\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdoes not match length of index \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    580\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m(\u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlen\u001b[39m(index)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m)\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    581\u001b[0m     )\n",
      "\u001b[1;31mValueError\u001b[0m: Length of values (1559) does not match length of index (14204)"
     ]
    }
   ],
   "source": [
    "# Lambda - very straight forward approach\n",
    "\n",
    "combined[\"Item_Weight\"] =combined.groupby(\"Item_Identifier\")\n",
    "[\"Item_Weight\"].apply(lambda x:x.fillna(x.median()))\n",
    "                      "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4cc21b45",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6a50548f",
   "metadata": {},
   "outputs": [],
   "source": [
    "combined.isnull().sum()[combined.isnull().sum()!=0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "id": "8eea23cd",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "incompatible index of inserted column with frame index",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\frame.py:11610\u001b[0m, in \u001b[0;36m_reindex_for_setitem\u001b[1;34m(value, index)\u001b[0m\n\u001b[0;32m  11609\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m> 11610\u001b[0m     reindexed_value \u001b[38;5;241m=\u001b[39m value\u001b[38;5;241m.\u001b[39mreindex(index)\u001b[38;5;241m.\u001b[39m_values\n\u001b[0;32m  11611\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n\u001b[0;32m  11612\u001b[0m     \u001b[38;5;66;03m# raised in MultiIndex.from_tuples, see test_insert_error_msmgs\u001b[39;00m\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\series.py:4918\u001b[0m, in \u001b[0;36mSeries.reindex\u001b[1;34m(self, index, axis, method, copy, level, fill_value, limit, tolerance)\u001b[0m\n\u001b[0;32m   4901\u001b[0m \u001b[38;5;129m@doc\u001b[39m(\n\u001b[0;32m   4902\u001b[0m     NDFrame\u001b[38;5;241m.\u001b[39mreindex,  \u001b[38;5;66;03m# type: ignore[has-type]\u001b[39;00m\n\u001b[0;32m   4903\u001b[0m     klass\u001b[38;5;241m=\u001b[39m_shared_doc_kwargs[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mklass\u001b[39m\u001b[38;5;124m\"\u001b[39m],\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m   4916\u001b[0m     tolerance\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[0;32m   4917\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Series:\n\u001b[1;32m-> 4918\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28msuper\u001b[39m()\u001b[38;5;241m.\u001b[39mreindex(\n\u001b[0;32m   4919\u001b[0m         index\u001b[38;5;241m=\u001b[39mindex,\n\u001b[0;32m   4920\u001b[0m         method\u001b[38;5;241m=\u001b[39mmethod,\n\u001b[0;32m   4921\u001b[0m         copy\u001b[38;5;241m=\u001b[39mcopy,\n\u001b[0;32m   4922\u001b[0m         level\u001b[38;5;241m=\u001b[39mlevel,\n\u001b[0;32m   4923\u001b[0m         fill_value\u001b[38;5;241m=\u001b[39mfill_value,\n\u001b[0;32m   4924\u001b[0m         limit\u001b[38;5;241m=\u001b[39mlimit,\n\u001b[0;32m   4925\u001b[0m         tolerance\u001b[38;5;241m=\u001b[39mtolerance,\n\u001b[0;32m   4926\u001b[0m     )\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\generic.py:5360\u001b[0m, in \u001b[0;36mNDFrame.reindex\u001b[1;34m(self, labels, index, columns, axis, method, copy, level, fill_value, limit, tolerance)\u001b[0m\n\u001b[0;32m   5359\u001b[0m \u001b[38;5;66;03m# perform the reindex on the axes\u001b[39;00m\n\u001b[1;32m-> 5360\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_reindex_axes(\n\u001b[0;32m   5361\u001b[0m     axes, level, limit, tolerance, method, fill_value, copy\n\u001b[0;32m   5362\u001b[0m )\u001b[38;5;241m.\u001b[39m__finalize__(\u001b[38;5;28mself\u001b[39m, method\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mreindex\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\generic.py:5375\u001b[0m, in \u001b[0;36mNDFrame._reindex_axes\u001b[1;34m(self, axes, level, limit, tolerance, method, fill_value, copy)\u001b[0m\n\u001b[0;32m   5374\u001b[0m ax \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_get_axis(a)\n\u001b[1;32m-> 5375\u001b[0m new_index, indexer \u001b[38;5;241m=\u001b[39m ax\u001b[38;5;241m.\u001b[39mreindex(\n\u001b[0;32m   5376\u001b[0m     labels, level\u001b[38;5;241m=\u001b[39mlevel, limit\u001b[38;5;241m=\u001b[39mlimit, tolerance\u001b[38;5;241m=\u001b[39mtolerance, method\u001b[38;5;241m=\u001b[39mmethod\n\u001b[0;32m   5377\u001b[0m )\n\u001b[0;32m   5379\u001b[0m axis \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_get_axis_number(a)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\indexes\\base.py:4279\u001b[0m, in \u001b[0;36mIndex.reindex\u001b[1;34m(self, target, method, level, limit, tolerance)\u001b[0m\n\u001b[0;32m   4277\u001b[0m             indexer, _ \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mget_indexer_non_unique(target)\n\u001b[1;32m-> 4279\u001b[0m target \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_wrap_reindex_result(target, indexer, preserve_names)\n\u001b[0;32m   4280\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m target, indexer\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py:2490\u001b[0m, in \u001b[0;36mMultiIndex._wrap_reindex_result\u001b[1;34m(self, target, indexer, preserve_names)\u001b[0m\n\u001b[0;32m   2489\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m-> 2490\u001b[0m     target \u001b[38;5;241m=\u001b[39m MultiIndex\u001b[38;5;241m.\u001b[39mfrom_tuples(target)\n\u001b[0;32m   2491\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[0;32m   2492\u001b[0m     \u001b[38;5;66;03m# not all tuples, see test_constructor_dict_multiindex_reindex_flat\u001b[39;00m\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py:211\u001b[0m, in \u001b[0;36mnames_compat.<locals>.new_meth\u001b[1;34m(self_or_cls, *args, **kwargs)\u001b[0m\n\u001b[0;32m    209\u001b[0m     kwargs[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnames\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m kwargs\u001b[38;5;241m.\u001b[39mpop(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mname\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m--> 211\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m meth(self_or_cls, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py:590\u001b[0m, in \u001b[0;36mMultiIndex.from_tuples\u001b[1;34m(cls, tuples, sortorder, names)\u001b[0m\n\u001b[0;32m    588\u001b[0m         tuples \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39masarray(tuples\u001b[38;5;241m.\u001b[39m_values)\n\u001b[1;32m--> 590\u001b[0m     arrays \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlist\u001b[39m(lib\u001b[38;5;241m.\u001b[39mtuples_to_object_array(tuples)\u001b[38;5;241m.\u001b[39mT)\n\u001b[0;32m    591\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(tuples, \u001b[38;5;28mlist\u001b[39m):\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\_libs\\lib.pyx:2894\u001b[0m, in \u001b[0;36mpandas._libs.lib.tuples_to_object_array\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;31mValueError\u001b[0m: Buffer dtype mismatch, expected 'Python object' but got 'long long'",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_14584\\324757096.py\u001b[0m in \u001b[0;36m?\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mcombined\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"Item_Visibility\"\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcombined\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mgroupby\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"Item_Identifier\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[0;31m\\\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;34m\"Item_Visibility\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[1;33m:\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mreplace\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mto_replace\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mvalue\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mx\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmedian\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(self, key, value)\u001b[0m\n\u001b[0;32m   3946\u001b[0m             \u001b[1;31m# Column to set is duplicated\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3947\u001b[0m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_setitem_array\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3948\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3949\u001b[0m             \u001b[1;31m# set column\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 3950\u001b[1;33m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_set_item\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(self, key, value)\u001b[0m\n\u001b[0;32m   4139\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   4140\u001b[0m         \u001b[0mSeries\u001b[0m\u001b[1;33m/\u001b[0m\u001b[0mTimeSeries\u001b[0m \u001b[0mwill\u001b[0m \u001b[0mbe\u001b[0m \u001b[0mconformed\u001b[0m \u001b[0mto\u001b[0m \u001b[0mthe\u001b[0m \u001b[0mDataFrames\u001b[0m \u001b[0mindex\u001b[0m \u001b[0mto\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   4141\u001b[0m         \u001b[0mensure\u001b[0m \u001b[0mhomogeneity\u001b[0m\u001b[1;33m.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   4142\u001b[0m         \"\"\"\n\u001b[1;32m-> 4143\u001b[1;33m         \u001b[0mvalue\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_sanitize_column\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   4144\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   4145\u001b[0m         if (\n\u001b[0;32m   4146\u001b[0m             \u001b[0mkey\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(self, value)\u001b[0m\n\u001b[0;32m   4863\u001b[0m         \u001b[1;31m# or through loc single_block_path\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   4864\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mDataFrame\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   4865\u001b[0m             \u001b[1;32mreturn\u001b[0m \u001b[0m_reindex_for_setitem\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   4866\u001b[0m         \u001b[1;32melif\u001b[0m \u001b[0mis_dict_like\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 4867\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0m_reindex_for_setitem\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mSeries\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   4868\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   4869\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mis_list_like\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   4870\u001b[0m             \u001b[0mcom\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrequire_length_match\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(value, index)\u001b[0m\n\u001b[0;32m  11613\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0mvalue\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mis_unique\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m  11614\u001b[0m             \u001b[1;31m# duplicate axis\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m  11615\u001b[0m             \u001b[1;32mraise\u001b[0m \u001b[0merr\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m  11616\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m> 11617\u001b[1;33m         raise TypeError(\n\u001b[0m\u001b[0;32m  11618\u001b[0m             \u001b[1;34m\"incompatible index of inserted column with frame index\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m  11619\u001b[0m         ) from err\n\u001b[0;32m  11620\u001b[0m     \u001b[1;32mreturn\u001b[0m \u001b[0mreindexed_value\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mTypeError\u001b[0m: incompatible index of inserted column with frame index"
     ]
    }
   ],
   "source": [
    "combined[\"Item_Visibility\"] = combined.groupby(\"Item_Identifier\")\\\n",
    "[\"Item_Visibility\"].apply(lambda x:x.replace(to_replace = 0,value = x.median()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "85279ce6",
   "metadata": {},
   "outputs": [],
   "source": [
    "sns.boxplot(data = combined, x = \"Outlet_Size\", \n",
    "           y = \"Item_Outlet_Sales\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ddb3e3b",
   "metadata": {},
   "source": [
    "### Feature Engineering\n",
    "\n",
    "* Bin the Item Identifier and Item Type\n",
    "\n",
    "Note: The Purpose of creating new features and binning is to make sure that the machine is able to capture the pattern well. This concept is known as Generalization."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "88822242",
   "metadata": {},
   "outputs": [],
   "source": [
    "combined.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ba940c77",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Extract the First Two Letters from Item ID\n",
    "ids = []\n",
    "\n",
    "for i in combined.Item_Identifier:\n",
    "    ids.append(i[:2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2d519f55",
   "metadata": {},
   "outputs": [],
   "source": [
    "combined[\"Item_IDS\"] = pd.Series(ids)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f3428ff",
   "metadata": {},
   "source": [
    "#### Steps that I Follow\n",
    "\n",
    "* Univariate\n",
    "* Biv\n",
    "* Feature Engineering - Most Important Step..\n",
    "* Missing Values\n",
    "* Outlier Analysis and Removal - This is the step where I split the data in train and test back again.\n",
    "* Scaling and Transformation\n",
    "* Categorical Encoding\n",
    "\n",
    "**Why I split the Data in Train and Test Before Outliers??**\n",
    "* You remove the Outliers from training data only and not from test.\n",
    "* Train - that dataset on which the model will get trained\n",
    "* Test - is that dataset on which the model will **predict**.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0aa25a8a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Pattern of Item ID vs Sales\n",
    "sns.boxplot(data = combined, x='Item_IDS', y = 'Item_Outlet_Sales')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c9e50257",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Where it is NC, we put Non Edible in Item Fat Content\n",
    "\n",
    "combined.loc[combined.Item_IDS==\"NC\", \"Item_Fat_Content\"]=\"Non_Edible\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "85f77b5f",
   "metadata": {},
   "outputs": [],
   "source": [
    "sns.boxplot(data = combined, x='Item_Fat_Content', \n",
    "            y = 'Item_Outlet_Sales')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "539207fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "combined.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8009b2dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "combined.Item_Type.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2345d0e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "perishables = ['Dairy', 'Meat', 'Fruits and Vegetables',\n",
    "       'Breakfast', 'Breads', 'Starchy Foods', 'Seafood']\n",
    "\n",
    "non_perishables = ['Soft Drinks', 'Baking Goods', \n",
    "                   'Snack Foods', 'Frozen Foods','Hard Drinks', 'Canned']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bd846acc",
   "metadata": {},
   "outputs": [],
   "source": [
    "def perish(x):\n",
    "    if x in perishables:\n",
    "        return(\"Perishables\")\n",
    "    elif x in non_perishables:\n",
    "        return(\"Non_Perishables\")\n",
    "    else:\n",
    "        return(\"Non_Eateries\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b25cdf43",
   "metadata": {},
   "outputs": [],
   "source": [
    "combined[\"Item_Type\"] = combined.Item_Type.apply(perish)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "92623da0",
   "metadata": {},
   "outputs": [],
   "source": [
    "sns.boxplot(data = combined, x='Item_Type', \n",
    "            y = 'Item_Outlet_Sales')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f71a7368",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Outlet Identifier\n",
    "sns.boxplot(data = combined, x='Outlet_Identifier', \n",
    "            y = 'Item_Outlet_Sales')\n",
    "plt.xticks(rotation = 90)\n",
    "plt.show()\n",
    "\n",
    "# Top Performers, Avg Performers, Bad Performers\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "82a7288d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#combined.groupby(\"Outlet_Identifier\")[\"Item_Outlet_Sales\"].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6a2c63ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Top - 27, 13 and 46, Low - 10 and 19\n",
    "top = ['OUT013', \"OUT027\", \"OUT046\"]\n",
    "low = ['OUT010', \"OUT019\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d170a625",
   "metadata": {},
   "outputs": [],
   "source": [
    "def outliers(x):\n",
    "    if x in top:\n",
    "        return(\"Top_Perf\")\n",
    "    elif x in low:\n",
    "        return(\"Low_Perf\")\n",
    "    else:\n",
    "        return(\"Avg_Perf\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d3a6441f",
   "metadata": {},
   "outputs": [],
   "source": [
    "combined[\"Outlets\"] = combined.Outlet_Identifier.apply(outliers)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ca97257b",
   "metadata": {},
   "outputs": [],
   "source": [
    "sns.boxplot(data = combined, x='Outlets', \n",
    "            y = 'Item_Outlet_Sales')\n",
    "plt.xticks(rotation = 90)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "44d35e98",
   "metadata": {},
   "outputs": [],
   "source": [
    "combined.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "be1b5530",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Vintage of the Outlet...\n",
    "combined[\"Vintage\"] = 2013 - combined.Outlet_Establishment_Year"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9d18bdc4",
   "metadata": {},
   "outputs": [],
   "source": [
    "combined.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7e7ece6a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Correlation plot\n",
    "sns.heatmap(combined.corr(), annot = True, cmap = \"YlGnBu\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fb10035c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Quantity\n",
    "combined[\"Price_Per_Unit\"] = combined.Item_MRP/combined.Item_Weight"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e9a6e3b1",
   "metadata": {},
   "outputs": [],
   "source": [
    "sns.scatterplot(data = combined, x = \"Price_Per_Unit\", \n",
    "                y = \"Item_Outlet_Sales\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d4fe6c0a",
   "metadata": {},
   "outputs": [],
   "source": [
    "combined.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c0c083ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Drop the Unnecessary Columns\n",
    "combined.drop([\"Item_Identifier\", \"Outlet_Identifier\",\n",
    "              \"Outlet_Establishment_Year\"], axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2daa7093",
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.set_option('display.max_columns', 50)\n",
    "pd.get_dummies(combined, drop_first = True).shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9198a350",
   "metadata": {},
   "source": [
    "### Outliers Analysis\n",
    "\n",
    "Here at this stage, we will split the data in Train and Test.\n",
    "\n",
    "``The No of Columns/Features in the Test Set is always n-1 where n is the total no of columns in the Train Set.``\n",
    "\n",
    "* Train set is the data from where the model will learn the pattern because it has predictors and the target variable.\n",
    "\n",
    "* Test is the data where we will do the prediction and check the performance of the model...\n",
    "\n",
    "\n",
    "#### Rule of Identifying the Outliers\n",
    "\n",
    "* Any value **greater than (Q3 + 1.5 * IQR)** is known as Outlier. This is called **Upper Outlier**\n",
    "\n",
    "* Similary, Any value **less than (Q1 - 1.5 * IQR)** is known as **Lower Outlier**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "d4d6ea2a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((8523, 12), (5681, 11), (14204, 12))"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Splitting the Data back in train and test....\n",
    "\n",
    "train.shape, test.shape, combined.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "bea2a233",
   "metadata": {},
   "outputs": [],
   "source": [
    "newtrain = combined.loc[0:train.shape[0]-1, ]\n",
    "newtest = combined.loc[train.shape[0]:, ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "f47dab3e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((8523, 12), (5681, 12))"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newtrain.shape, newtest.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "55de948a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Item_Outlet_Sales'>"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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+eefd5988onLyspyfr/f7d27N9hTO2ejRo1yL774otu5c6fLz893Y8aMcd26dXPHjx/3xixevNhFR0e7lStXuh07dri77rrLde3a1RUXF3tjpk2b5i666CK3bt06t3XrVnfddde5K664wp0+fdobc8MNN7iUlBS3efNmt3nzZpeSkuJuuummJj3fs5Gbm+t69OjhBgwY4LKysrzbW+N6HDlyxHXv3t1NmTLFffjhh66goMCtX7/effHFF96Y1rYuf/jDH1xcXJx78803XUFBgfvnP//p2rVr55588klvzIW+JqtXr3bz5893K1eudJLcq6++GrC9qc7/9OnTLiUlxV133XVu69atbt26dS4xMdFNnz690degurrW5Pvvv3cjRoxwr7zyitu9e7fLyclx11xzjUtNTQ3Yx4W2Jo2h2QTC4MGD3bRp0wJu69Onj5s3b16QZtR4Dh486CS5TZs2Oeecq6iocF26dHGLFy/2xpSWlrqYmBj3t7/9zTn33//ow8PD3YoVK7wx33zzjQsJCXFvv/22c865Tz75xEly//nPf7wxOTk5TpLbvXt3U5zaWSkpKXGXXnqpW7dunRs+fLgXCK11PR566CE3bNiwWre3xnUZM2aMmzp1asBtt99+u5s4caJzrvWtSfUHw6Y8/9WrV7uQkBD3zTffeGNefvllFxER4Y4dO9Yo51sfNUVTdbm5uU6S9z+cF/qanC/N4imGU6dOKS8vTyNHjgy4feTIkdq8eXOQZtV4jh07Jknq2LGjJKmgoEBFRUUB5x8REaHhw4d755+Xl6eysrKAMYmJiUpJSfHG5OTkKCYmRtdcc4035ic/+YliYmKa5Tref//9GjNmjEaMGBFwe2tdj9dff12DBg3SnXfeqYSEBF111VV6/vnnve2tcV2GDRumd999V5999pkkafv27Xr//fd14403Smqda1JVU55/Tk6OUlJSlJiY6I0ZNWqUTp48GfA0WHN07Ngx+Xw+xcbGSmJN6qvBn8VwPh06dEjl5eXq3LlzwO2dO3dWUVFRkGbVOJxzys7O1rBhw5SSkiJJ3jnWdP579+71xrRp00YdOnQwYyrvX1RUpISEBHPMhISEZreOK1as0NatW7VlyxazrTWuhyR99dVXevbZZ5Wdna3f/OY3ys3N1QMPPKCIiAhNmjSpVa7LQw89pGPHjqlPnz4KDQ1VeXm5HnnkEY0fP15S6/1vpVJTnn9RUZE5TocOHdSmTZtmvUalpaWaN2+eJkyY4H3OQmtfk/pqFoFQqfqnQjrnztsnRTYX06dP18cff6z333/fbGvI+VcfU9P45raO+/btU1ZWltauXavIyMhax7WW9ahUUVGhQYMG6Y9//KMk6aqrrtKuXbv07LPPatKkSd641rQur7zyipYuXarly5erX79+ys/P18yZM5WYmKjJkyd741rTmtSkqc6/pa1RWVmZxo0bp4qKCi1ZsuSM41vDmpyNZvEUQ3x8vEJDQ01xHTx40NRZSzZjxgy9/vrr2rBhQ8AnYXbp0kWS6jz/Ll266NSpUzp69GidY7799ltz3O+++65ZrWNeXp4OHjyo1NRUhYWFKSwsTJs2bdLTTz+tsLAwb66tZT0qde3aVX379g247fLLL1dhYaGk1vffiSTNmTNH8+bN07hx49S/f39lZmbqwQcf1KJFiyS1zjWpqinPv0uXLuY4R48eVVlZWbNco7KyMo0dO1YFBQVat25dwKc0ttY1OVvNIhDatGmj1NRUrVu3LuD2devWaejQoUGa1fnjnNP06dO1atUq/etf/1LPnj0Dtvfs2VNdunQJOP9Tp05p06ZN3vmnpqYqPDw8YMyBAwe0c+dOb8yQIUN07Ngx5ebmemM+/PBDHTt2rFmt4/XXX68dO3YoPz/f+zNo0CBlZGQoPz9fvXr1alXrUemnP/2pefvrZ599pu7du0tqff+dSNKJEyfM59WHhoZ6b3NsjWtSVVOe/5AhQ7Rz504dOHDAG7N27VpFREQoNTW1Uc/zbFXGweeff67169crLi4uYHtrXJMGacpXRNal8m2OL7zwgvvkk0/czJkznd/vd3v27An21M7Zfffd52JiYtzGjRvdgQMHvD8nTpzwxixevNjFxMS4VatWuR07drjx48fX+FalpKQkt379erd161b385//vMa35QwYMMDl5OS4nJwc179//2bxVq0zqfouBuda53rk5ua6sLAw98gjj7jPP//cLVu2zLVt29YtXbrUG9Pa1mXy5Mnuoosu8t7muGrVKhcfH+/mzp3rjbnQ16SkpMRt27bNbdu2zUlyf/7zn922bdu8V+Q31flXvqXv+uuvd1u3bnXr1693SUlJQXlLX11rUlZW5m6++WaXlJTk8vPzA37mnjx50tvHhbYmjaHZ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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# See the Outlier\n",
    "sns.boxplot(data = newtrain, x = \"Item_Outlet_Sales\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "8458b081",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "unsupported operand type(s) for -: 'str' and 'str'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[94], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m# Lets Frame the Rules\u001b[39;00m\n\u001b[1;32m----> 2\u001b[0m q3 \u001b[38;5;241m=\u001b[39m newtrain\u001b[38;5;241m.\u001b[39mquantile(\u001b[38;5;241m0.75\u001b[39m)\n\u001b[0;32m      3\u001b[0m q1 \u001b[38;5;241m=\u001b[39m newtrain\u001b[38;5;241m.\u001b[39mquantile(\u001b[38;5;241m0.25\u001b[39m)\n\u001b[0;32m      5\u001b[0m \u001b[38;5;66;03m# Inter Quartile Range\u001b[39;00m\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\frame.py:10882\u001b[0m, in \u001b[0;36mDataFrame.quantile\u001b[1;34m(self, q, axis, numeric_only, interpolation, method)\u001b[0m\n\u001b[0;32m  10875\u001b[0m axis \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_get_axis_number(axis)\n\u001b[0;32m  10877\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m is_list_like(q):\n\u001b[0;32m  10878\u001b[0m     \u001b[38;5;66;03m# BlockManager.quantile expects listlike, so we wrap and unwrap here\u001b[39;00m\n\u001b[0;32m  10879\u001b[0m     \u001b[38;5;66;03m# error: List item 0 has incompatible type \"Union[float, Union[Union[\u001b[39;00m\n\u001b[0;32m  10880\u001b[0m     \u001b[38;5;66;03m# ExtensionArray, ndarray[Any, Any]], Index, Series], Sequence[float]]\";\u001b[39;00m\n\u001b[0;32m  10881\u001b[0m     \u001b[38;5;66;03m# expected \"float\"\u001b[39;00m\n\u001b[1;32m> 10882\u001b[0m     res_df \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mquantile(  \u001b[38;5;66;03m# type: ignore[call-overload]\u001b[39;00m\n\u001b[0;32m  10883\u001b[0m         [q],\n\u001b[0;32m  10884\u001b[0m         axis\u001b[38;5;241m=\u001b[39maxis,\n\u001b[0;32m  10885\u001b[0m         numeric_only\u001b[38;5;241m=\u001b[39mnumeric_only,\n\u001b[0;32m  10886\u001b[0m         interpolation\u001b[38;5;241m=\u001b[39minterpolation,\n\u001b[0;32m  10887\u001b[0m         method\u001b[38;5;241m=\u001b[39mmethod,\n\u001b[0;32m  10888\u001b[0m     )\n\u001b[0;32m  10889\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m method \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124msingle\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[0;32m  10890\u001b[0m         res \u001b[38;5;241m=\u001b[39m res_df\u001b[38;5;241m.\u001b[39miloc[\u001b[38;5;241m0\u001b[39m]\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\frame.py:10927\u001b[0m, in \u001b[0;36mDataFrame.quantile\u001b[1;34m(self, q, axis, numeric_only, interpolation, method)\u001b[0m\n\u001b[0;32m  10923\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m  10924\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mInvalid method: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mmethod\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m. Method must be in \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mvalid_method\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m  10925\u001b[0m     )\n\u001b[0;32m  10926\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m method \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124msingle\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[1;32m> 10927\u001b[0m     res \u001b[38;5;241m=\u001b[39m data\u001b[38;5;241m.\u001b[39m_mgr\u001b[38;5;241m.\u001b[39mquantile(qs\u001b[38;5;241m=\u001b[39mq, axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m, interpolation\u001b[38;5;241m=\u001b[39minterpolation)\n\u001b[0;32m  10928\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m method \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtable\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[0;32m  10929\u001b[0m     valid_interpolation \u001b[38;5;241m=\u001b[39m {\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnearest\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mlower\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mhigher\u001b[39m\u001b[38;5;124m\"\u001b[39m}\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\internals\\managers.py:1587\u001b[0m, in \u001b[0;36mBlockManager.quantile\u001b[1;34m(self, qs, axis, interpolation)\u001b[0m\n\u001b[0;32m   1584\u001b[0m new_axes \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlist\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39maxes)\n\u001b[0;32m   1585\u001b[0m new_axes[\u001b[38;5;241m1\u001b[39m] \u001b[38;5;241m=\u001b[39m Index(qs, dtype\u001b[38;5;241m=\u001b[39mnp\u001b[38;5;241m.\u001b[39mfloat64)\n\u001b[1;32m-> 1587\u001b[0m blocks \u001b[38;5;241m=\u001b[39m [\n\u001b[0;32m   1588\u001b[0m     blk\u001b[38;5;241m.\u001b[39mquantile(axis\u001b[38;5;241m=\u001b[39maxis, qs\u001b[38;5;241m=\u001b[39mqs, interpolation\u001b[38;5;241m=\u001b[39minterpolation)\n\u001b[0;32m   1589\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m blk \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mblocks\n\u001b[0;32m   1590\u001b[0m ]\n\u001b[0;32m   1592\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mtype\u001b[39m(\u001b[38;5;28mself\u001b[39m)(blocks, new_axes)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\internals\\managers.py:1588\u001b[0m, in \u001b[0;36m<listcomp>\u001b[1;34m(.0)\u001b[0m\n\u001b[0;32m   1584\u001b[0m new_axes \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlist\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39maxes)\n\u001b[0;32m   1585\u001b[0m new_axes[\u001b[38;5;241m1\u001b[39m] \u001b[38;5;241m=\u001b[39m Index(qs, dtype\u001b[38;5;241m=\u001b[39mnp\u001b[38;5;241m.\u001b[39mfloat64)\n\u001b[0;32m   1587\u001b[0m blocks \u001b[38;5;241m=\u001b[39m [\n\u001b[1;32m-> 1588\u001b[0m     blk\u001b[38;5;241m.\u001b[39mquantile(axis\u001b[38;5;241m=\u001b[39maxis, qs\u001b[38;5;241m=\u001b[39mqs, interpolation\u001b[38;5;241m=\u001b[39minterpolation)\n\u001b[0;32m   1589\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m blk \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mblocks\n\u001b[0;32m   1590\u001b[0m ]\n\u001b[0;32m   1592\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mtype\u001b[39m(\u001b[38;5;28mself\u001b[39m)(blocks, new_axes)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py:1463\u001b[0m, in \u001b[0;36mBlock.quantile\u001b[1;34m(self, qs, interpolation, axis)\u001b[0m\n\u001b[0;32m   1460\u001b[0m \u001b[38;5;28;01massert\u001b[39;00m axis \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m  \u001b[38;5;66;03m# only ever called this way\u001b[39;00m\n\u001b[0;32m   1461\u001b[0m \u001b[38;5;28;01massert\u001b[39;00m is_list_like(qs)  \u001b[38;5;66;03m# caller is responsible for this\u001b[39;00m\n\u001b[1;32m-> 1463\u001b[0m result \u001b[38;5;241m=\u001b[39m quantile_compat(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mvalues, np\u001b[38;5;241m.\u001b[39masarray(qs\u001b[38;5;241m.\u001b[39m_values), interpolation)\n\u001b[0;32m   1464\u001b[0m \u001b[38;5;66;03m# ensure_block_shape needed for cases where we start with EA and result\u001b[39;00m\n\u001b[0;32m   1465\u001b[0m \u001b[38;5;66;03m#  is ndarray, e.g. IntegerArray, SparseArray\u001b[39;00m\n\u001b[0;32m   1466\u001b[0m result \u001b[38;5;241m=\u001b[39m ensure_block_shape(result, ndim\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m2\u001b[39m)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\array_algos\\quantile.py:37\u001b[0m, in \u001b[0;36mquantile_compat\u001b[1;34m(values, qs, interpolation)\u001b[0m\n\u001b[0;32m     35\u001b[0m     fill_value \u001b[38;5;241m=\u001b[39m na_value_for_dtype(values\u001b[38;5;241m.\u001b[39mdtype, compat\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m)\n\u001b[0;32m     36\u001b[0m     mask \u001b[38;5;241m=\u001b[39m isna(values)\n\u001b[1;32m---> 37\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m quantile_with_mask(values, mask, fill_value, qs, interpolation)\n\u001b[0;32m     38\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m     39\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m values\u001b[38;5;241m.\u001b[39m_quantile(qs, interpolation)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\array_algos\\quantile.py:95\u001b[0m, in \u001b[0;36mquantile_with_mask\u001b[1;34m(values, mask, fill_value, qs, interpolation)\u001b[0m\n\u001b[0;32m     93\u001b[0m     result \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mrepeat(flat, \u001b[38;5;28mlen\u001b[39m(values))\u001b[38;5;241m.\u001b[39mreshape(\u001b[38;5;28mlen\u001b[39m(values), \u001b[38;5;28mlen\u001b[39m(qs))\n\u001b[0;32m     94\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m---> 95\u001b[0m     result \u001b[38;5;241m=\u001b[39m _nanpercentile(\n\u001b[0;32m     96\u001b[0m         values,\n\u001b[0;32m     97\u001b[0m         qs \u001b[38;5;241m*\u001b[39m \u001b[38;5;241m100.0\u001b[39m,\n\u001b[0;32m     98\u001b[0m         na_value\u001b[38;5;241m=\u001b[39mfill_value,\n\u001b[0;32m     99\u001b[0m         mask\u001b[38;5;241m=\u001b[39mmask,\n\u001b[0;32m    100\u001b[0m         interpolation\u001b[38;5;241m=\u001b[39minterpolation,\n\u001b[0;32m    101\u001b[0m     )\n\u001b[0;32m    103\u001b[0m     result \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39marray(result, copy\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m)\n\u001b[0;32m    104\u001b[0m     result \u001b[38;5;241m=\u001b[39m result\u001b[38;5;241m.\u001b[39mT\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\array_algos\\quantile.py:216\u001b[0m, in \u001b[0;36m_nanpercentile\u001b[1;34m(values, qs, na_value, mask, interpolation)\u001b[0m\n\u001b[0;32m    214\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m result\n\u001b[0;32m    215\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 216\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m np\u001b[38;5;241m.\u001b[39mpercentile(\n\u001b[0;32m    217\u001b[0m         values,\n\u001b[0;32m    218\u001b[0m         qs,\n\u001b[0;32m    219\u001b[0m         axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m,\n\u001b[0;32m    220\u001b[0m         \u001b[38;5;66;03m# error: No overload variant of \"percentile\" matches argument types\u001b[39;00m\n\u001b[0;32m    221\u001b[0m         \u001b[38;5;66;03m# \"ndarray[Any, Any]\", \"ndarray[Any, dtype[floating[_64Bit]]]\",\u001b[39;00m\n\u001b[0;32m    222\u001b[0m         \u001b[38;5;66;03m# \"int\", \"Dict[str, str]\"  [call-overload]\u001b[39;00m\n\u001b[0;32m    223\u001b[0m         \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m{np_percentile_argname: interpolation},  \u001b[38;5;66;03m# type: ignore[call-overload]\u001b[39;00m\n\u001b[0;32m    224\u001b[0m     )\n",
      "File \u001b[1;32m<__array_function__ internals>:200\u001b[0m, in \u001b[0;36mpercentile\u001b[1;34m(*args, **kwargs)\u001b[0m\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\numpy\\lib\\function_base.py:4205\u001b[0m, in \u001b[0;36mpercentile\u001b[1;34m(a, q, axis, out, overwrite_input, method, keepdims, interpolation)\u001b[0m\n\u001b[0;32m   4203\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m _quantile_is_valid(q):\n\u001b[0;32m   4204\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mPercentiles must be in the range [0, 100]\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m-> 4205\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m _quantile_unchecked(\n\u001b[0;32m   4206\u001b[0m     a, q, axis, out, overwrite_input, method, keepdims)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\numpy\\lib\\function_base.py:4473\u001b[0m, in \u001b[0;36m_quantile_unchecked\u001b[1;34m(a, q, axis, out, overwrite_input, method, keepdims)\u001b[0m\n\u001b[0;32m   4465\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_quantile_unchecked\u001b[39m(a,\n\u001b[0;32m   4466\u001b[0m                         q,\n\u001b[0;32m   4467\u001b[0m                         axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m   4470\u001b[0m                         method\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mlinear\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m   4471\u001b[0m                         keepdims\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m):\n\u001b[0;32m   4472\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Assumes that q is in [0, 1], and is an ndarray\"\"\"\u001b[39;00m\n\u001b[1;32m-> 4473\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m _ureduce(a,\n\u001b[0;32m   4474\u001b[0m                     func\u001b[38;5;241m=\u001b[39m_quantile_ureduce_func,\n\u001b[0;32m   4475\u001b[0m                     q\u001b[38;5;241m=\u001b[39mq,\n\u001b[0;32m   4476\u001b[0m                     keepdims\u001b[38;5;241m=\u001b[39mkeepdims,\n\u001b[0;32m   4477\u001b[0m                     axis\u001b[38;5;241m=\u001b[39maxis,\n\u001b[0;32m   4478\u001b[0m                     out\u001b[38;5;241m=\u001b[39mout,\n\u001b[0;32m   4479\u001b[0m                     overwrite_input\u001b[38;5;241m=\u001b[39moverwrite_input,\n\u001b[0;32m   4480\u001b[0m                     method\u001b[38;5;241m=\u001b[39mmethod)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\numpy\\lib\\function_base.py:3752\u001b[0m, in \u001b[0;36m_ureduce\u001b[1;34m(a, func, keepdims, **kwargs)\u001b[0m\n\u001b[0;32m   3749\u001b[0m             index_out \u001b[38;5;241m=\u001b[39m (\u001b[38;5;241m0\u001b[39m, ) \u001b[38;5;241m*\u001b[39m nd\n\u001b[0;32m   3750\u001b[0m             kwargs[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mout\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m out[(\u001b[38;5;28mEllipsis\u001b[39m, ) \u001b[38;5;241m+\u001b[39m index_out]\n\u001b[1;32m-> 3752\u001b[0m r \u001b[38;5;241m=\u001b[39m func(a, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m   3754\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m out \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m   3755\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m out\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\numpy\\lib\\function_base.py:4639\u001b[0m, in \u001b[0;36m_quantile_ureduce_func\u001b[1;34m(a, q, axis, out, overwrite_input, method)\u001b[0m\n\u001b[0;32m   4637\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m   4638\u001b[0m         arr \u001b[38;5;241m=\u001b[39m a\u001b[38;5;241m.\u001b[39mcopy()\n\u001b[1;32m-> 4639\u001b[0m result \u001b[38;5;241m=\u001b[39m _quantile(arr,\n\u001b[0;32m   4640\u001b[0m                    quantiles\u001b[38;5;241m=\u001b[39mq,\n\u001b[0;32m   4641\u001b[0m                    axis\u001b[38;5;241m=\u001b[39maxis,\n\u001b[0;32m   4642\u001b[0m                    method\u001b[38;5;241m=\u001b[39mmethod,\n\u001b[0;32m   4643\u001b[0m                    out\u001b[38;5;241m=\u001b[39mout)\n\u001b[0;32m   4644\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m result\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\numpy\\lib\\function_base.py:4756\u001b[0m, in \u001b[0;36m_quantile\u001b[1;34m(arr, quantiles, axis, method, out)\u001b[0m\n\u001b[0;32m   4754\u001b[0m     result_shape \u001b[38;5;241m=\u001b[39m virtual_indexes\u001b[38;5;241m.\u001b[39mshape \u001b[38;5;241m+\u001b[39m (\u001b[38;5;241m1\u001b[39m,) \u001b[38;5;241m*\u001b[39m (arr\u001b[38;5;241m.\u001b[39mndim \u001b[38;5;241m-\u001b[39m \u001b[38;5;241m1\u001b[39m)\n\u001b[0;32m   4755\u001b[0m     gamma \u001b[38;5;241m=\u001b[39m gamma\u001b[38;5;241m.\u001b[39mreshape(result_shape)\n\u001b[1;32m-> 4756\u001b[0m     result \u001b[38;5;241m=\u001b[39m _lerp(previous,\n\u001b[0;32m   4757\u001b[0m                    \u001b[38;5;28mnext\u001b[39m,\n\u001b[0;32m   4758\u001b[0m                    gamma,\n\u001b[0;32m   4759\u001b[0m                    out\u001b[38;5;241m=\u001b[39mout)\n\u001b[0;32m   4760\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m np\u001b[38;5;241m.\u001b[39many(slices_having_nans):\n\u001b[0;32m   4761\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m result\u001b[38;5;241m.\u001b[39mndim \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m \u001b[38;5;129;01mand\u001b[39;00m out \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m   4762\u001b[0m         \u001b[38;5;66;03m# can't write to a scalar\u001b[39;00m\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\numpy\\lib\\function_base.py:4573\u001b[0m, in \u001b[0;36m_lerp\u001b[1;34m(a, b, t, out)\u001b[0m\n\u001b[0;32m   4559\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_lerp\u001b[39m(a, b, t, out\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m):\n\u001b[0;32m   4560\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m   4561\u001b[0m \u001b[38;5;124;03m    Compute the linear interpolation weighted by gamma on each point of\u001b[39;00m\n\u001b[0;32m   4562\u001b[0m \u001b[38;5;124;03m    two same shape array.\u001b[39;00m\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m   4571\u001b[0m \u001b[38;5;124;03m        Output array.\u001b[39;00m\n\u001b[0;32m   4572\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[1;32m-> 4573\u001b[0m     diff_b_a \u001b[38;5;241m=\u001b[39m subtract(b, a)\n\u001b[0;32m   4574\u001b[0m     \u001b[38;5;66;03m# asanyarray is a stop-gap until gh-13105\u001b[39;00m\n\u001b[0;32m   4575\u001b[0m     lerp_interpolation \u001b[38;5;241m=\u001b[39m asanyarray(add(a, diff_b_a \u001b[38;5;241m*\u001b[39m t, out\u001b[38;5;241m=\u001b[39mout))\n",
      "\u001b[1;31mTypeError\u001b[0m: unsupported operand type(s) for -: 'str' and 'str'"
     ]
    }
   ],
   "source": [
    "# Lets Frame the Rules\n",
    "q3 = newtrain.quantile(0.75)\n",
    "q1 = newtrain.quantile(0.25)\n",
    "\n",
    "# Inter Quartile Range\n",
    "IQR = q3 - q1\n",
    "\n",
    "# Upper Outlier Cut off\n",
    "upper = q3 + 1.5*IQR\n",
    "\n",
    "# Lower Outlier Cut off\n",
    "lower = q1 - 1.5 * IQR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "7afb740c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Lets Remove the Outliers from the Train Dataset only....\n",
    "\n",
    "# .any(axis = 1) represents that the condition should be checked for all\n",
    "# the rows and wherever the condition is met, it should produce the data...\n",
    "\n",
    "#wt_outliers = newtrain.loc[~((newtrain>upper) | \\\n",
    " #                            (newtrain<lower)).any(axis = 1)]\n",
    "\n",
    "wt_outliers = newtrain"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "347d16a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "sns.boxplot(data = wt_outliers, x = \"Item_Outlet_Sales\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2e15dbe",
   "metadata": {},
   "source": [
    "### Scaling post Outliers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "dfa79946",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "sc = StandardScaler()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "49b5fec7",
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'Price_Per_Unit'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\indexes\\base.py:3653\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   3652\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m-> 3653\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_engine\u001b[38;5;241m.\u001b[39mget_loc(casted_key)\n\u001b[0;32m   3654\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\_libs\\index.pyx:147\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\_libs\\index.pyx:176\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32mpandas\\_libs\\hashtable_class_helper.pxi:7080\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32mpandas\\_libs\\hashtable_class_helper.pxi:7088\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;31mKeyError\u001b[0m: 'Price_Per_Unit'",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[156], line 9\u001b[0m\n\u001b[0;32m      3\u001b[0m nums \u001b[38;5;241m=\u001b[39m [\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mItem_Weight\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mItem_Visibility\u001b[39m\u001b[38;5;124m'\u001b[39m, \n\u001b[0;32m      4\u001b[0m         \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mItem_MRP\u001b[39m\u001b[38;5;124m'\u001b[39m,\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mPrice_Per_Unit\u001b[39m\u001b[38;5;124m'\u001b[39m]\n\u001b[0;32m      6\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m nums:\n\u001b[0;32m      7\u001b[0m     \u001b[38;5;66;03m# Scaling the Train Features\u001b[39;00m\n\u001b[0;32m      8\u001b[0m     wt_outliers\u001b[38;5;241m.\u001b[39mloc[:, i] \u001b[38;5;241m=\u001b[39m sc\u001b[38;5;241m.\u001b[39mfit_transform(pd\u001b[38;5;241m.\u001b[39mDataFrame\\\n\u001b[1;32m----> 9\u001b[0m                                              (wt_outliers\u001b[38;5;241m.\u001b[39mloc[:, i]))    \n\u001b[0;32m     10\u001b[0m     \u001b[38;5;66;03m# Scale the Test Set Features.\u001b[39;00m\n\u001b[0;32m     11\u001b[0m     newtest\u001b[38;5;241m.\u001b[39mloc[:,i] \u001b[38;5;241m=\u001b[39m sc\u001b[38;5;241m.\u001b[39mtransform(pd\u001b[38;5;241m.\u001b[39mDataFrame(newtest\u001b[38;5;241m.\u001b[39mloc[:, i]))\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\indexing.py:1097\u001b[0m, in \u001b[0;36m_LocationIndexer.__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   1095\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_is_scalar_access(key):\n\u001b[0;32m   1096\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mobj\u001b[38;5;241m.\u001b[39m_get_value(\u001b[38;5;241m*\u001b[39mkey, takeable\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_takeable)\n\u001b[1;32m-> 1097\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_getitem_tuple(key)\n\u001b[0;32m   1098\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m   1099\u001b[0m     \u001b[38;5;66;03m# we by definition only have the 0th axis\u001b[39;00m\n\u001b[0;32m   1100\u001b[0m     axis \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39maxis \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;241m0\u001b[39m\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\indexing.py:1280\u001b[0m, in \u001b[0;36m_LocIndexer._getitem_tuple\u001b[1;34m(self, tup)\u001b[0m\n\u001b[0;32m   1278\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m suppress(IndexingError):\n\u001b[0;32m   1279\u001b[0m     tup \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_expand_ellipsis(tup)\n\u001b[1;32m-> 1280\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_getitem_lowerdim(tup)\n\u001b[0;32m   1282\u001b[0m \u001b[38;5;66;03m# no multi-index, so validate all of the indexers\u001b[39;00m\n\u001b[0;32m   1283\u001b[0m tup \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_validate_tuple_indexer(tup)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\indexing.py:1000\u001b[0m, in \u001b[0;36m_LocationIndexer._getitem_lowerdim\u001b[1;34m(self, tup)\u001b[0m\n\u001b[0;32m    996\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m i, key \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28menumerate\u001b[39m(tup):\n\u001b[0;32m    997\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m is_label_like(key):\n\u001b[0;32m    998\u001b[0m         \u001b[38;5;66;03m# We don't need to check for tuples here because those are\u001b[39;00m\n\u001b[0;32m    999\u001b[0m         \u001b[38;5;66;03m#  caught by the _is_nested_tuple_indexer check above.\u001b[39;00m\n\u001b[1;32m-> 1000\u001b[0m         section \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_getitem_axis(key, axis\u001b[38;5;241m=\u001b[39mi)\n\u001b[0;32m   1002\u001b[0m         \u001b[38;5;66;03m# We should never have a scalar section here, because\u001b[39;00m\n\u001b[0;32m   1003\u001b[0m         \u001b[38;5;66;03m#  _getitem_lowerdim is only called after a check for\u001b[39;00m\n\u001b[0;32m   1004\u001b[0m         \u001b[38;5;66;03m#  is_scalar_access, which that would be.\u001b[39;00m\n\u001b[0;32m   1005\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m section\u001b[38;5;241m.\u001b[39mndim \u001b[38;5;241m==\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mndim:\n\u001b[0;32m   1006\u001b[0m             \u001b[38;5;66;03m# we're in the middle of slicing through a MultiIndex\u001b[39;00m\n\u001b[0;32m   1007\u001b[0m             \u001b[38;5;66;03m# revise the key wrt to `section` by inserting an _NS\u001b[39;00m\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\indexing.py:1343\u001b[0m, in \u001b[0;36m_LocIndexer._getitem_axis\u001b[1;34m(self, key, axis)\u001b[0m\n\u001b[0;32m   1341\u001b[0m \u001b[38;5;66;03m# fall thru to straight lookup\u001b[39;00m\n\u001b[0;32m   1342\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_validate_key(key, axis)\n\u001b[1;32m-> 1343\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_get_label(key, axis\u001b[38;5;241m=\u001b[39maxis)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\indexing.py:1293\u001b[0m, in \u001b[0;36m_LocIndexer._get_label\u001b[1;34m(self, label, axis)\u001b[0m\n\u001b[0;32m   1291\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_get_label\u001b[39m(\u001b[38;5;28mself\u001b[39m, label, axis: AxisInt):\n\u001b[0;32m   1292\u001b[0m     \u001b[38;5;66;03m# GH#5567 this will fail if the label is not present in the axis.\u001b[39;00m\n\u001b[1;32m-> 1293\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mobj\u001b[38;5;241m.\u001b[39mxs(label, axis\u001b[38;5;241m=\u001b[39maxis)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\generic.py:4082\u001b[0m, in \u001b[0;36mNDFrame.xs\u001b[1;34m(self, key, axis, level, drop_level)\u001b[0m\n\u001b[0;32m   4080\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m axis \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[0;32m   4081\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m drop_level:\n\u001b[1;32m-> 4082\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m[key]\n\u001b[0;32m   4083\u001b[0m     index \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns\n\u001b[0;32m   4084\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\frame.py:3761\u001b[0m, in \u001b[0;36mDataFrame.__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   3759\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m.\u001b[39mnlevels \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[0;32m   3760\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_getitem_multilevel(key)\n\u001b[1;32m-> 3761\u001b[0m indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m.\u001b[39mget_loc(key)\n\u001b[0;32m   3762\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_integer(indexer):\n\u001b[0;32m   3763\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m [indexer]\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\indexes\\base.py:3655\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   3653\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_engine\u001b[38;5;241m.\u001b[39mget_loc(casted_key)\n\u001b[0;32m   3654\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n\u001b[1;32m-> 3655\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[0;32m   3656\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[0;32m   3657\u001b[0m     \u001b[38;5;66;03m# If we have a listlike key, _check_indexing_error will raise\u001b[39;00m\n\u001b[0;32m   3658\u001b[0m     \u001b[38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise\u001b[39;00m\n\u001b[0;32m   3659\u001b[0m     \u001b[38;5;66;03m#  the TypeError.\u001b[39;00m\n\u001b[0;32m   3660\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_indexing_error(key)\n",
      "\u001b[1;31mKeyError\u001b[0m: 'Price_Per_Unit'"
     ]
    }
   ],
   "source": [
    "# Applying it in Train and Test Together\n",
    "\n",
    "nums = ['Item_Weight', 'Item_Visibility', \n",
    "        'Item_MRP','Price_Per_Unit']\n",
    "\n",
    "for i in nums:\n",
    "    # Scaling the Train Features\n",
    "    wt_outliers.loc[:, i] = sc.fit_transform(pd.DataFrame\\\n",
    "                                             (wt_outliers.loc[:, i]))    \n",
    "    # Scale the Test Set Features.\n",
    "    newtest.loc[:,i] = sc.transform(pd.DataFrame(newtest.loc[:, i]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "471e3208",
   "metadata": {},
   "outputs": [],
   "source": [
    "wt_outliers.head(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f1f1a093",
   "metadata": {},
   "source": [
    "### Outliers Using Z Score \n",
    "\n",
    "* Generally the Z Score is applied on the Target variable...\n",
    "\n",
    "#### Empirical Rule\n",
    "\n",
    "* 68.3% Data lies within +/- 1 S.D.\n",
    "* 95.44% Data lies within +/- 2 S.D.\n",
    "* 99.7% Data lies within +/- 3 S.D."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "783eb393",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Find the Z Score of the Target variable....\n",
    "\n",
    "from scipy.stats import zscore\n",
    "\n",
    "newtrain[\"z_scaled\"] = zscore(newtrain.Item_Outlet_Sales)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "4fcde7ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Identifier</th>\n",
       "      <th>Item_Weight</th>\n",
       "      <th>Item_Fat_Content</th>\n",
       "      <th>Item_Visibility</th>\n",
       "      <th>Item_Type</th>\n",
       "      <th>Item_MRP</th>\n",
       "      <th>Outlet_Identifier</th>\n",
       "      <th>Outlet_Establishment_Year</th>\n",
       "      <th>Outlet_Size</th>\n",
       "      <th>Outlet_Location_Type</th>\n",
       "      <th>Outlet_Type</th>\n",
       "      <th>Item_Outlet_Sales</th>\n",
       "      <th>z_scaled</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>FDA15</td>\n",
       "      <td>-0.766364</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>-0.970732</td>\n",
       "      <td>Dairy</td>\n",
       "      <td>1.747454</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>3735.138</td>\n",
       "      <td>0.910601</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Item_Identifier  Item_Weight Item_Fat_Content  Item_Visibility Item_Type  \\\n",
       "0           FDA15    -0.766364          Low Fat        -0.970732     Dairy   \n",
       "\n",
       "   Item_MRP Outlet_Identifier  Outlet_Establishment_Year Outlet_Size  \\\n",
       "0  1.747454            OUT049                       1999      Medium   \n",
       "\n",
       "  Outlet_Location_Type        Outlet_Type  Item_Outlet_Sales  z_scaled  \n",
       "0               Tier 1  Supermarket Type1           3735.138  0.910601  "
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newtrain.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "a57a7610",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(90, 13)"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Condition is: Any value greater than  or less than +/-3 Sigma/Zscore is\n",
    "# An Outlier...\n",
    "\n",
    "newtrain.loc[np.abs(newtrain.z_scaled)>3].shape # Outlier Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "a888b28c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8433, 13)"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Data After Outliers Removal....\n",
    "newtrain.loc[np.abs(newtrain.z_scaled)<=3].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "450abf90",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Identifier</th>\n",
       "      <th>Item_Weight</th>\n",
       "      <th>Item_Fat_Content</th>\n",
       "      <th>Item_Visibility</th>\n",
       "      <th>Item_Type</th>\n",
       "      <th>Item_MRP</th>\n",
       "      <th>Outlet_Identifier</th>\n",
       "      <th>Outlet_Establishment_Year</th>\n",
       "      <th>Outlet_Size</th>\n",
       "      <th>Outlet_Location_Type</th>\n",
       "      <th>Outlet_Type</th>\n",
       "      <th>Item_Outlet_Sales</th>\n",
       "      <th>Outlet_Mean_Sales</th>\n",
       "      <th>Outlet_Sales_Std</th>\n",
       "      <th>Outlet_Sales_Median</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>FDA15</td>\n",
       "      <td>9.30</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016047</td>\n",
       "      <td>Dairy</td>\n",
       "      <td>249.8092</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>3735.1380</td>\n",
       "      <td>2348.354635</td>\n",
       "      <td>1513.289464</td>\n",
       "      <td>1966.1074</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>DRC01</td>\n",
       "      <td>5.92</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.019278</td>\n",
       "      <td>Soft Drinks</td>\n",
       "      <td>48.2692</td>\n",
       "      <td>OUT018</td>\n",
       "      <td>2009</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type2</td>\n",
       "      <td>443.4228</td>\n",
       "      <td>1995.498739</td>\n",
       "      <td>1375.932889</td>\n",
       "      <td>1655.1788</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Item_Identifier  Item_Weight Item_Fat_Content  Item_Visibility    Item_Type  \\\n",
       "0           FDA15         9.30          Low Fat         0.016047        Dairy   \n",
       "1           DRC01         5.92          Regular         0.019278  Soft Drinks   \n",
       "\n",
       "   Item_MRP Outlet_Identifier  Outlet_Establishment_Year Outlet_Size  \\\n",
       "0  249.8092            OUT049                       1999      Medium   \n",
       "1   48.2692            OUT018                       2009      Medium   \n",
       "\n",
       "  Outlet_Location_Type        Outlet_Type  Item_Outlet_Sales  \\\n",
       "0               Tier 1  Supermarket Type1          3735.1380   \n",
       "1               Tier 3  Supermarket Type2           443.4228   \n",
       "\n",
       "   Outlet_Mean_Sales  Outlet_Sales_Std  Outlet_Sales_Median  \n",
       "0        2348.354635       1513.289464            1966.1074  \n",
       "1        1995.498739       1375.932889            1655.1788  "
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "9b0af878",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Finding the Mean Sales of Outlets\n",
    "mean_sales = train.groupby(\"Outlet_Identifier\")\\\n",
    "[\"Item_Outlet_Sales\"].mean().to_dict()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "28670b83",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Target Encoding of Outlets\n",
    "train[\"Outlet_Mean_Sales\"] = train.Outlet_Identifier.map(mean_sales)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "9fadb66d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Encoding Test Set basis Target variable...\n",
    "\n",
    "test[\"Outlet_Mean_Sales\"] = test.Outlet_Identifier.map(mean_sales)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "ee205dc2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'OUT010': 339.351661981982,\n",
       " 'OUT013': 2298.995255579399,\n",
       " 'OUT017': 2340.67526349892,\n",
       " 'OUT018': 1995.498739224138,\n",
       " 'OUT019': 340.3297227272727,\n",
       " 'OUT027': 3694.0385576470585,\n",
       " 'OUT035': 2438.841866021505,\n",
       " 'OUT045': 2192.384797631862,\n",
       " 'OUT046': 2277.8442668817206,\n",
       " 'OUT049': 2348.3546346236562}"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_sales"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "454b6e06",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Item Type Encoding Basis Target\n",
    "\n",
    "product_sales = train.groupby(\"Item_Type\")\\\n",
    "[\"Item_Outlet_Sales\"].mean().to_dict()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "71fffc3c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "4840b428",
   "metadata": {},
   "outputs": [],
   "source": [
    "# We have to now use the above encoding to replace Item Type with Avg Sales\n",
    "train[\"Prod_Sales\"] = train.Item_Type.map(product_sales)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "49ce67a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "train.drop(\"Prod_Sales\", axis = 1, inplace =True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "21405ee2",
   "metadata": {},
   "outputs": [],
   "source": [
    "del(product_sales)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "931af236",
   "metadata": {},
   "outputs": [],
   "source": [
    "train[\"Outlet_Sales_Std\"] = train.groupby(\"Outlet_Identifier\")\\\n",
    "[\"Item_Outlet_Sales\"].transform(\"std\")\n",
    "\n",
    "train[\"Outlet_Sales_Median\"] = train.groupby(\"Outlet_Identifier\")\\\n",
    "[\"Item_Outlet_Sales\"].transform(\"median\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "82179871",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "could not convert string to float: 'FDA15'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[115], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m plt\u001b[38;5;241m.\u001b[39mfigure(figsize \u001b[38;5;241m=\u001b[39m (\u001b[38;5;241m10\u001b[39m, \u001b[38;5;241m6\u001b[39m))\n\u001b[1;32m----> 2\u001b[0m sns\u001b[38;5;241m.\u001b[39mheatmap(train\u001b[38;5;241m.\u001b[39mcorr(), annot \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\frame.py:10054\u001b[0m, in \u001b[0;36mDataFrame.corr\u001b[1;34m(self, method, min_periods, numeric_only)\u001b[0m\n\u001b[0;32m  10052\u001b[0m cols \u001b[38;5;241m=\u001b[39m data\u001b[38;5;241m.\u001b[39mcolumns\n\u001b[0;32m  10053\u001b[0m idx \u001b[38;5;241m=\u001b[39m cols\u001b[38;5;241m.\u001b[39mcopy()\n\u001b[1;32m> 10054\u001b[0m mat \u001b[38;5;241m=\u001b[39m data\u001b[38;5;241m.\u001b[39mto_numpy(dtype\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mfloat\u001b[39m, na_value\u001b[38;5;241m=\u001b[39mnp\u001b[38;5;241m.\u001b[39mnan, copy\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m)\n\u001b[0;32m  10056\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m method \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpearson\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[0;32m  10057\u001b[0m     correl \u001b[38;5;241m=\u001b[39m libalgos\u001b[38;5;241m.\u001b[39mnancorr(mat, minp\u001b[38;5;241m=\u001b[39mmin_periods)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\frame.py:1838\u001b[0m, in \u001b[0;36mDataFrame.to_numpy\u001b[1;34m(self, dtype, copy, na_value)\u001b[0m\n\u001b[0;32m   1836\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m dtype \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m   1837\u001b[0m     dtype \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mdtype(dtype)\n\u001b[1;32m-> 1838\u001b[0m result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_mgr\u001b[38;5;241m.\u001b[39mas_array(dtype\u001b[38;5;241m=\u001b[39mdtype, copy\u001b[38;5;241m=\u001b[39mcopy, na_value\u001b[38;5;241m=\u001b[39mna_value)\n\u001b[0;32m   1839\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m result\u001b[38;5;241m.\u001b[39mdtype \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m dtype:\n\u001b[0;32m   1840\u001b[0m     result \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39marray(result, dtype\u001b[38;5;241m=\u001b[39mdtype, copy\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\internals\\managers.py:1732\u001b[0m, in \u001b[0;36mBlockManager.as_array\u001b[1;34m(self, dtype, copy, na_value)\u001b[0m\n\u001b[0;32m   1730\u001b[0m         arr\u001b[38;5;241m.\u001b[39mflags\u001b[38;5;241m.\u001b[39mwriteable \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[0;32m   1731\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m-> 1732\u001b[0m     arr \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_interleave(dtype\u001b[38;5;241m=\u001b[39mdtype, na_value\u001b[38;5;241m=\u001b[39mna_value)\n\u001b[0;32m   1733\u001b[0m     \u001b[38;5;66;03m# The underlying data was copied within _interleave, so no need\u001b[39;00m\n\u001b[0;32m   1734\u001b[0m     \u001b[38;5;66;03m# to further copy if copy=True or setting na_value\u001b[39;00m\n\u001b[0;32m   1736\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m na_value \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m lib\u001b[38;5;241m.\u001b[39mno_default:\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\internals\\managers.py:1794\u001b[0m, in \u001b[0;36mBlockManager._interleave\u001b[1;34m(self, dtype, na_value)\u001b[0m\n\u001b[0;32m   1792\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m   1793\u001b[0m         arr \u001b[38;5;241m=\u001b[39m blk\u001b[38;5;241m.\u001b[39mget_values(dtype)\n\u001b[1;32m-> 1794\u001b[0m     result[rl\u001b[38;5;241m.\u001b[39mindexer] \u001b[38;5;241m=\u001b[39m arr\n\u001b[0;32m   1795\u001b[0m     itemmask[rl\u001b[38;5;241m.\u001b[39mindexer] \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1\u001b[39m\n\u001b[0;32m   1797\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m itemmask\u001b[38;5;241m.\u001b[39mall():\n",
      "\u001b[1;31mValueError\u001b[0m: could not convert string to float: 'FDA15'"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 1000x600 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (10, 6))\n",
    "sns.heatmap(train.corr(), annot = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "0bbed20f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Identifier</th>\n",
       "      <th>Item_Weight</th>\n",
       "      <th>Item_Fat_Content</th>\n",
       "      <th>Item_Visibility</th>\n",
       "      <th>Item_Type</th>\n",
       "      <th>Item_MRP</th>\n",
       "      <th>Outlet_Identifier</th>\n",
       "      <th>Outlet_Establishment_Year</th>\n",
       "      <th>Outlet_Size</th>\n",
       "      <th>Outlet_Location_Type</th>\n",
       "      <th>Outlet_Type</th>\n",
       "      <th>Item_Outlet_Sales</th>\n",
       "      <th>z_scaled</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>FDA15</td>\n",
       "      <td>-0.766364</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>-0.970732</td>\n",
       "      <td>Dairy</td>\n",
       "      <td>1.747454</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>3735.1380</td>\n",
       "      <td>0.910601</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>DRC01</td>\n",
       "      <td>-1.494283</td>\n",
       "      <td>Regular</td>\n",
       "      <td>-0.908111</td>\n",
       "      <td>Soft Drinks</td>\n",
       "      <td>-1.489023</td>\n",
       "      <td>OUT018</td>\n",
       "      <td>2009</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type2</td>\n",
       "      <td>443.4228</td>\n",
       "      <td>-1.018440</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>FDN15</td>\n",
       "      <td>0.999593</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>-0.956917</td>\n",
       "      <td>Meat</td>\n",
       "      <td>0.010040</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>2097.2700</td>\n",
       "      <td>-0.049238</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>FDX07</td>\n",
       "      <td>1.365706</td>\n",
       "      <td>Regular</td>\n",
       "      <td>-1.281758</td>\n",
       "      <td>Fruits and Vegetables</td>\n",
       "      <td>0.660050</td>\n",
       "      <td>OUT010</td>\n",
       "      <td>1998</td>\n",
       "      <td>Small</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Grocery Store</td>\n",
       "      <td>732.3800</td>\n",
       "      <td>-0.849103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NCD19</td>\n",
       "      <td>-0.846047</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>-1.281758</td>\n",
       "      <td>Household</td>\n",
       "      <td>-1.399220</td>\n",
       "      <td>OUT013</td>\n",
       "      <td>1987</td>\n",
       "      <td>High</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>994.7052</td>\n",
       "      <td>-0.695373</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Item_Identifier  Item_Weight Item_Fat_Content  Item_Visibility  \\\n",
       "0           FDA15    -0.766364          Low Fat        -0.970732   \n",
       "1           DRC01    -1.494283          Regular        -0.908111   \n",
       "2           FDN15     0.999593          Low Fat        -0.956917   \n",
       "3           FDX07     1.365706          Regular        -1.281758   \n",
       "4           NCD19    -0.846047          Low Fat        -1.281758   \n",
       "\n",
       "               Item_Type  Item_MRP Outlet_Identifier  \\\n",
       "0                  Dairy  1.747454            OUT049   \n",
       "1            Soft Drinks -1.489023            OUT018   \n",
       "2                   Meat  0.010040            OUT049   \n",
       "3  Fruits and Vegetables  0.660050            OUT010   \n",
       "4              Household -1.399220            OUT013   \n",
       "\n",
       "   Outlet_Establishment_Year Outlet_Size Outlet_Location_Type  \\\n",
       "0                       1999      Medium               Tier 1   \n",
       "1                       2009      Medium               Tier 3   \n",
       "2                       1999      Medium               Tier 1   \n",
       "3                       1998       Small               Tier 3   \n",
       "4                       1987        High               Tier 3   \n",
       "\n",
       "         Outlet_Type  Item_Outlet_Sales  z_scaled  \n",
       "0  Supermarket Type1          3735.1380  0.910601  \n",
       "1  Supermarket Type2           443.4228 -1.018440  \n",
       "2  Supermarket Type1          2097.2700 -0.049238  \n",
       "3      Grocery Store           732.3800 -0.849103  \n",
       "4  Supermarket Type1           994.7052 -0.695373  "
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wt_outliers.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "da1767eb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Medium', 'Small', 'High'], dtype=object)"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wt_outliers.Outlet_Size.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "2edc51ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "# dictionary to map the Outlet Size....\n",
    "\n",
    "dict_size = {\"Medium\":3, \"Small\":2, \"High\":1}\n",
    "wt_outliers[\"Outlet_Size\"] = wt_outliers[\"Outlet_Size\"].map(dict_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "62d7fded",
   "metadata": {},
   "outputs": [],
   "source": [
    "newtest[\"Outlet_Size\"] = newtest[\"Outlet_Size\"].map(dict_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "b11f3b54",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Frequency Encoding on Outlet Type\n",
    "#train.Item_Type.value_counts(normalize = True).to_dict()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "ab38fdbc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# One Hot Encoding....\n",
    "\n",
    "dummytrain = pd.get_dummies(wt_outliers, drop_first = True)\n",
    "dummytest = pd.get_dummies(newtest, drop_first = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "c7ea97eb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((8523, 1595), (5681, 1578))"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dummytrain.shape, dummytest.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "d5858f71",
   "metadata": {},
   "outputs": [],
   "source": [
    "# remove tgt from dummytest\n",
    "dummytest.drop(\"Item_Outlet_Sales\", axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2f740f59",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "117a8976",
   "metadata": {},
   "source": [
    "### Modelling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "e9025797",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import KFold\n",
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "# Initiate the model\n",
    "lr=LinearRegression()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "6f7def20",
   "metadata": {},
   "outputs": [],
   "source": [
    "#split the data in x and y\n",
    "X=dummytrain.drop(\"Item_Outlet_Sales\",axis=1)\n",
    "y=dummytrain.Item_Outlet_Sales\n",
    "\n",
    "#define the KFold\n",
    "kfold = KFold(n_splits=5,shuffle=True , random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "209e9aac",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Input X contains NaN.\nLinearRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[154], line 7\u001b[0m\n\u001b[0;32m      5\u001b[0m xtrain \u001b[38;5;241m=\u001b[39m X\u001b[38;5;241m.\u001b[39miloc[train_index] \u001b[38;5;66;03m# Creating X train\u001b[39;00m\n\u001b[0;32m      6\u001b[0m ytrain\u001b[38;5;241m=\u001b[39my\u001b[38;5;241m.\u001b[39miloc[train_index] \u001b[38;5;66;03m# Creating y train\u001b[39;00m\n\u001b[1;32m----> 7\u001b[0m pred\u001b[38;5;241m.\u001b[39mappend(lr\u001b[38;5;241m.\u001b[39mfit(xtrain,ytrain)\u001b[38;5;241m.\u001b[39mpredict(dummytest))\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\sklearn\\base.py:1151\u001b[0m, in \u001b[0;36m_fit_context.<locals>.decorator.<locals>.wrapper\u001b[1;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[0;32m   1144\u001b[0m     estimator\u001b[38;5;241m.\u001b[39m_validate_params()\n\u001b[0;32m   1146\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m config_context(\n\u001b[0;32m   1147\u001b[0m     skip_parameter_validation\u001b[38;5;241m=\u001b[39m(\n\u001b[0;32m   1148\u001b[0m         prefer_skip_nested_validation \u001b[38;5;129;01mor\u001b[39;00m global_skip_validation\n\u001b[0;32m   1149\u001b[0m     )\n\u001b[0;32m   1150\u001b[0m ):\n\u001b[1;32m-> 1151\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m fit_method(estimator, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\sklearn\\linear_model\\_base.py:678\u001b[0m, in \u001b[0;36mLinearRegression.fit\u001b[1;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[0;32m    674\u001b[0m n_jobs_ \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_jobs\n\u001b[0;32m    676\u001b[0m accept_sparse \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mpositive \u001b[38;5;28;01melse\u001b[39;00m [\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcsr\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcsc\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcoo\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n\u001b[1;32m--> 678\u001b[0m X, y \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_validate_data(\n\u001b[0;32m    679\u001b[0m     X, y, accept_sparse\u001b[38;5;241m=\u001b[39maccept_sparse, y_numeric\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m, multi_output\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m\n\u001b[0;32m    680\u001b[0m )\n\u001b[0;32m    682\u001b[0m has_sw \u001b[38;5;241m=\u001b[39m sample_weight \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m    683\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m has_sw:\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\sklearn\\base.py:621\u001b[0m, in \u001b[0;36mBaseEstimator._validate_data\u001b[1;34m(self, X, y, reset, validate_separately, cast_to_ndarray, **check_params)\u001b[0m\n\u001b[0;32m    619\u001b[0m         y \u001b[38;5;241m=\u001b[39m check_array(y, input_name\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124my\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mcheck_y_params)\n\u001b[0;32m    620\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 621\u001b[0m         X, y \u001b[38;5;241m=\u001b[39m check_X_y(X, y, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mcheck_params)\n\u001b[0;32m    622\u001b[0m     out \u001b[38;5;241m=\u001b[39m X, y\n\u001b[0;32m    624\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m no_val_X \u001b[38;5;129;01mand\u001b[39;00m check_params\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mensure_2d\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mTrue\u001b[39;00m):\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\sklearn\\utils\\validation.py:1147\u001b[0m, in \u001b[0;36mcheck_X_y\u001b[1;34m(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)\u001b[0m\n\u001b[0;32m   1142\u001b[0m         estimator_name \u001b[38;5;241m=\u001b[39m _check_estimator_name(estimator)\n\u001b[0;32m   1143\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m   1144\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mestimator_name\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m requires y to be passed, but the target y is None\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1145\u001b[0m     )\n\u001b[1;32m-> 1147\u001b[0m X \u001b[38;5;241m=\u001b[39m check_array(\n\u001b[0;32m   1148\u001b[0m     X,\n\u001b[0;32m   1149\u001b[0m     accept_sparse\u001b[38;5;241m=\u001b[39maccept_sparse,\n\u001b[0;32m   1150\u001b[0m     accept_large_sparse\u001b[38;5;241m=\u001b[39maccept_large_sparse,\n\u001b[0;32m   1151\u001b[0m     dtype\u001b[38;5;241m=\u001b[39mdtype,\n\u001b[0;32m   1152\u001b[0m     order\u001b[38;5;241m=\u001b[39morder,\n\u001b[0;32m   1153\u001b[0m     copy\u001b[38;5;241m=\u001b[39mcopy,\n\u001b[0;32m   1154\u001b[0m     force_all_finite\u001b[38;5;241m=\u001b[39mforce_all_finite,\n\u001b[0;32m   1155\u001b[0m     ensure_2d\u001b[38;5;241m=\u001b[39mensure_2d,\n\u001b[0;32m   1156\u001b[0m     allow_nd\u001b[38;5;241m=\u001b[39mallow_nd,\n\u001b[0;32m   1157\u001b[0m     ensure_min_samples\u001b[38;5;241m=\u001b[39mensure_min_samples,\n\u001b[0;32m   1158\u001b[0m     ensure_min_features\u001b[38;5;241m=\u001b[39mensure_min_features,\n\u001b[0;32m   1159\u001b[0m     estimator\u001b[38;5;241m=\u001b[39mestimator,\n\u001b[0;32m   1160\u001b[0m     input_name\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mX\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m   1161\u001b[0m )\n\u001b[0;32m   1163\u001b[0m y \u001b[38;5;241m=\u001b[39m _check_y(y, multi_output\u001b[38;5;241m=\u001b[39mmulti_output, y_numeric\u001b[38;5;241m=\u001b[39my_numeric, estimator\u001b[38;5;241m=\u001b[39mestimator)\n\u001b[0;32m   1165\u001b[0m check_consistent_length(X, y)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\sklearn\\utils\\validation.py:959\u001b[0m, in \u001b[0;36mcheck_array\u001b[1;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)\u001b[0m\n\u001b[0;32m    953\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m    954\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mFound array with dim \u001b[39m\u001b[38;5;132;01m%d\u001b[39;00m\u001b[38;5;124m. \u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[38;5;124m expected <= 2.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    955\u001b[0m             \u001b[38;5;241m%\u001b[39m (array\u001b[38;5;241m.\u001b[39mndim, estimator_name)\n\u001b[0;32m    956\u001b[0m         )\n\u001b[0;32m    958\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m force_all_finite:\n\u001b[1;32m--> 959\u001b[0m         _assert_all_finite(\n\u001b[0;32m    960\u001b[0m             array,\n\u001b[0;32m    961\u001b[0m             input_name\u001b[38;5;241m=\u001b[39minput_name,\n\u001b[0;32m    962\u001b[0m             estimator_name\u001b[38;5;241m=\u001b[39mestimator_name,\n\u001b[0;32m    963\u001b[0m             allow_nan\u001b[38;5;241m=\u001b[39mforce_all_finite \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mallow-nan\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m    964\u001b[0m         )\n\u001b[0;32m    966\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m ensure_min_samples \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m0\u001b[39m:\n\u001b[0;32m    967\u001b[0m     n_samples \u001b[38;5;241m=\u001b[39m _num_samples(array)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\sklearn\\utils\\validation.py:124\u001b[0m, in \u001b[0;36m_assert_all_finite\u001b[1;34m(X, allow_nan, msg_dtype, estimator_name, input_name)\u001b[0m\n\u001b[0;32m    121\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m first_pass_isfinite:\n\u001b[0;32m    122\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m\n\u001b[1;32m--> 124\u001b[0m _assert_all_finite_element_wise(\n\u001b[0;32m    125\u001b[0m     X,\n\u001b[0;32m    126\u001b[0m     xp\u001b[38;5;241m=\u001b[39mxp,\n\u001b[0;32m    127\u001b[0m     allow_nan\u001b[38;5;241m=\u001b[39mallow_nan,\n\u001b[0;32m    128\u001b[0m     msg_dtype\u001b[38;5;241m=\u001b[39mmsg_dtype,\n\u001b[0;32m    129\u001b[0m     estimator_name\u001b[38;5;241m=\u001b[39mestimator_name,\n\u001b[0;32m    130\u001b[0m     input_name\u001b[38;5;241m=\u001b[39minput_name,\n\u001b[0;32m    131\u001b[0m )\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\sklearn\\utils\\validation.py:173\u001b[0m, in \u001b[0;36m_assert_all_finite_element_wise\u001b[1;34m(X, xp, allow_nan, msg_dtype, estimator_name, input_name)\u001b[0m\n\u001b[0;32m    156\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m estimator_name \u001b[38;5;129;01mand\u001b[39;00m input_name \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mX\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01mand\u001b[39;00m has_nan_error:\n\u001b[0;32m    157\u001b[0m     \u001b[38;5;66;03m# Improve the error message on how to handle missing values in\u001b[39;00m\n\u001b[0;32m    158\u001b[0m     \u001b[38;5;66;03m# scikit-learn.\u001b[39;00m\n\u001b[0;32m    159\u001b[0m     msg_err \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m (\n\u001b[0;32m    160\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;132;01m{\u001b[39;00mestimator_name\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m does not accept missing values\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    161\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m encoded as NaN natively. For supervised learning, you might want\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m    171\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m#estimators-that-handle-nan-values\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    172\u001b[0m     )\n\u001b[1;32m--> 173\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(msg_err)\n",
      "\u001b[1;31mValueError\u001b[0m: Input X contains NaN.\nLinearRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values"
     ]
    }
   ],
   "source": [
    "#Deploy the KFold Model\n",
    "pred=[]\n",
    "\n",
    "for train_index , test_index in kfold.split(X,y): # K FOLD MEANING TO SPLIT THE DATA IN THE BACK GROUND\n",
    "    xtrain = X.iloc[train_index] # Creating X train\n",
    "    ytrain=y.iloc[train_index] # Creating y train\n",
    "    pred.append(lr.fit(xtrain,ytrain).predict(dummytest))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "d835cc30",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Series([], dtype: float64)"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(pred).T.mean(axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "48ec8b1b",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "No axis named 2 for object type DataFrame",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(cls, axis)\u001b[0m\n\u001b[0;32m    513\u001b[0m             \u001b[1;32mreturn\u001b[0m \u001b[0mcls\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_AXIS_TO_AXIS_NUMBER\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    514\u001b[0m         \u001b[1;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 515\u001b[1;33m             \u001b[1;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34mf\"No axis named {axis} for object type {cls.__name__}\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m: 2",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_14584\\2351918830.py\u001b[0m in \u001b[0;36m?\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mfinal\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mpd\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mpred\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mT\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(self, axis, skipna, numeric_only, **kwargs)\u001b[0m\n\u001b[0;32m  11552\u001b[0m             \u001b[0mskipna\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mbool_t\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mTrue\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m  11553\u001b[0m             \u001b[0mnumeric_only\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mbool_t\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mFalse\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m  11554\u001b[0m             \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m  11555\u001b[0m         ):\n\u001b[1;32m> 11556\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mNDFrame\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mskipna\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnumeric_only\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(self, axis, skipna, numeric_only, **kwargs)\u001b[0m\n\u001b[0;32m  11197\u001b[0m         \u001b[0mskipna\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mbool_t\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mTrue\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m  11198\u001b[0m         \u001b[0mnumeric_only\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mbool_t\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mFalse\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m  11199\u001b[0m         \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m  11200\u001b[0m     ) -> Series | float:\n\u001b[1;32m> 11201\u001b[1;33m         return self._stat_function(\n\u001b[0m\u001b[0;32m  11202\u001b[0m             \u001b[1;34m\"mean\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnanops\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mnanmean\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mskipna\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnumeric_only\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m  11203\u001b[0m         )\n",
      "\u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(self, name, func, axis, skipna, numeric_only, **kwargs)\u001b[0m\n\u001b[0;32m  11154\u001b[0m             \u001b[0mnv\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mvalidate_stat_func\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfname\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m  11155\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m  11156\u001b[0m         \u001b[0mvalidate_bool_kwarg\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mskipna\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m\"skipna\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnone_allowed\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mFalse\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m  11157\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m> 11158\u001b[1;33m         return self._reduce(\n\u001b[0m\u001b[0;32m  11159\u001b[0m             \u001b[0mfunc\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mname\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mskipna\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mskipna\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnumeric_only\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mnumeric_only\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m  11160\u001b[0m         )\n",
      "\u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(self, op, name, axis, skipna, numeric_only, filter_type, **kwds)\u001b[0m\n\u001b[0;32m  10464\u001b[0m         \u001b[1;32massert\u001b[0m \u001b[0mfilter_type\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mNone\u001b[0m \u001b[1;32mor\u001b[0m \u001b[0mfilter_type\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m\"bool\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfilter_type\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m  10465\u001b[0m         \u001b[0mout_dtype\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m\"bool\"\u001b[0m \u001b[1;32mif\u001b[0m \u001b[0mfilter_type\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m\"bool\"\u001b[0m \u001b[1;32melse\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m  10466\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m  10467\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0maxis\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m> 10468\u001b[1;33m             \u001b[0maxis\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_get_axis_number\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m  10469\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m  10470\u001b[0m         \u001b[1;32mdef\u001b[0m \u001b[0mfunc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m  10471\u001b[0m             \u001b[1;31m# We only use this in the case that operates on self.values\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(cls, axis)\u001b[0m\n\u001b[0;32m    511\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m_get_axis_number\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mcls\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mAxis\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m->\u001b[0m \u001b[0mAxisInt\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    512\u001b[0m         \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    513\u001b[0m             \u001b[1;32mreturn\u001b[0m \u001b[0mcls\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_AXIS_TO_AXIS_NUMBER\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    514\u001b[0m         \u001b[1;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 515\u001b[1;33m             \u001b[1;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34mf\"No axis named {axis} for object type {cls.__name__}\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m: No axis named 2 for object type DataFrame"
     ]
    }
   ],
   "source": [
    "final=pd.DataFrame(pred).T.mean(axis=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "159d9063",
   "metadata": {},
   "outputs": [],
   "source": [
    "submission=pd.DataFrame({})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2f2e811b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5df1b89d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "75667e96",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "array length 0 does not match index length 5681",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[130], line 3\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m# Submission File\u001b[39;00m\n\u001b[1;32m----> 3\u001b[0m submission \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mDataFrame({\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mItem_Identifier\u001b[39m\u001b[38;5;124m\"\u001b[39m:test\u001b[38;5;241m.\u001b[39mItem_Identifier,\n\u001b[0;32m      4\u001b[0m                           \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mOutlet_Identifier\u001b[39m\u001b[38;5;124m\"\u001b[39m:test\u001b[38;5;241m.\u001b[39mOutlet_Identifier,\n\u001b[0;32m      5\u001b[0m                           \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mItem_Outlet_Sales\u001b[39m\u001b[38;5;124m\"\u001b[39m: np\u001b[38;5;241m.\u001b[39mabs(pred)})\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\frame.py:709\u001b[0m, in \u001b[0;36mDataFrame.__init__\u001b[1;34m(self, data, index, columns, dtype, copy)\u001b[0m\n\u001b[0;32m    703\u001b[0m     mgr \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_init_mgr(\n\u001b[0;32m    704\u001b[0m         data, axes\u001b[38;5;241m=\u001b[39m{\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mindex\u001b[39m\u001b[38;5;124m\"\u001b[39m: index, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcolumns\u001b[39m\u001b[38;5;124m\"\u001b[39m: columns}, dtype\u001b[38;5;241m=\u001b[39mdtype, copy\u001b[38;5;241m=\u001b[39mcopy\n\u001b[0;32m    705\u001b[0m     )\n\u001b[0;32m    707\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(data, \u001b[38;5;28mdict\u001b[39m):\n\u001b[0;32m    708\u001b[0m     \u001b[38;5;66;03m# GH#38939 de facto copy defaults to False only in non-dict cases\u001b[39;00m\n\u001b[1;32m--> 709\u001b[0m     mgr \u001b[38;5;241m=\u001b[39m dict_to_mgr(data, index, columns, dtype\u001b[38;5;241m=\u001b[39mdtype, copy\u001b[38;5;241m=\u001b[39mcopy, typ\u001b[38;5;241m=\u001b[39mmanager)\n\u001b[0;32m    710\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(data, ma\u001b[38;5;241m.\u001b[39mMaskedArray):\n\u001b[0;32m    711\u001b[0m     \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mnumpy\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mma\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m mrecords\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\internals\\construction.py:481\u001b[0m, in \u001b[0;36mdict_to_mgr\u001b[1;34m(data, index, columns, dtype, typ, copy)\u001b[0m\n\u001b[0;32m    477\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    478\u001b[0m         \u001b[38;5;66;03m# dtype check to exclude e.g. range objects, scalars\u001b[39;00m\n\u001b[0;32m    479\u001b[0m         arrays \u001b[38;5;241m=\u001b[39m [x\u001b[38;5;241m.\u001b[39mcopy() \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mhasattr\u001b[39m(x, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdtype\u001b[39m\u001b[38;5;124m\"\u001b[39m) \u001b[38;5;28;01melse\u001b[39;00m x \u001b[38;5;28;01mfor\u001b[39;00m x \u001b[38;5;129;01min\u001b[39;00m arrays]\n\u001b[1;32m--> 481\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m arrays_to_mgr(arrays, columns, index, dtype\u001b[38;5;241m=\u001b[39mdtype, typ\u001b[38;5;241m=\u001b[39mtyp, consolidate\u001b[38;5;241m=\u001b[39mcopy)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\internals\\construction.py:115\u001b[0m, in \u001b[0;36marrays_to_mgr\u001b[1;34m(arrays, columns, index, dtype, verify_integrity, typ, consolidate)\u001b[0m\n\u001b[0;32m    112\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m verify_integrity:\n\u001b[0;32m    113\u001b[0m     \u001b[38;5;66;03m# figure out the index, if necessary\u001b[39;00m\n\u001b[0;32m    114\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m index \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m--> 115\u001b[0m         index \u001b[38;5;241m=\u001b[39m _extract_index(arrays)\n\u001b[0;32m    116\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    117\u001b[0m         index \u001b[38;5;241m=\u001b[39m ensure_index(index)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\internals\\construction.py:668\u001b[0m, in \u001b[0;36m_extract_index\u001b[1;34m(data)\u001b[0m\n\u001b[0;32m    663\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m lengths[\u001b[38;5;241m0\u001b[39m] \u001b[38;5;241m!=\u001b[39m \u001b[38;5;28mlen\u001b[39m(index):\n\u001b[0;32m    664\u001b[0m         msg \u001b[38;5;241m=\u001b[39m (\n\u001b[0;32m    665\u001b[0m             \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124marray length \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mlengths[\u001b[38;5;241m0\u001b[39m]\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m does not match index \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    666\u001b[0m             \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mlength \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlen\u001b[39m(index)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    667\u001b[0m         )\n\u001b[1;32m--> 668\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(msg)\n\u001b[0;32m    669\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    670\u001b[0m     index \u001b[38;5;241m=\u001b[39m default_index(lengths[\u001b[38;5;241m0\u001b[39m])\n",
      "\u001b[1;31mValueError\u001b[0m: array length 0 does not match index length 5681"
     ]
    }
   ],
   "source": [
    "# Submission File\n",
    "\n",
    "submission = pd.DataFrame({\"Item_Identifier\":test.Item_Identifier,\n",
    "                          \"Outlet_Identifier\":test.Outlet_Identifier,\n",
    "                          \"Item_Outlet_Sales\": np.abs(pred)})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b0555270",
   "metadata": {},
   "outputs": [],
   "source": [
    "submission.to_csv(\"GBMModel.csv\", index = False) # 1237.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "1a5e33c0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "C:\\Users\\My pc\n"
     ]
    }
   ],
   "source": [
    "cd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "77d6c4a2",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "befd07c6",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'LinearRegression' object has no attribute 'coef_'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[132], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m###Plot the Coefficeints\u001b[39;00m\n\u001b[1;32m----> 2\u001b[0m pd\u001b[38;5;241m.\u001b[39mDataFrame(lr\u001b[38;5;241m.\u001b[39mcoef_,lr\u001b[38;5;241m.\u001b[39mfeature_names_in,columns\u001b[38;5;241m=\u001b[39m[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mWeights\u001b[39m\u001b[38;5;124m\"\u001b[39m])\u001b[38;5;241m.\u001b[39msort_values(by\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mWeights\u001b[39m\u001b[38;5;124m\"\u001b[39m,ascending\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m)\u001b[38;5;241m.\u001b[39mplot(kind\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mbar\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'LinearRegression' object has no attribute 'coef_'"
     ]
    }
   ],
   "source": [
    "###Plot the Coefficeints\n",
    "pd.DataFrame(lr.coef_,lr.feature_names_in,columns=[\"Weights\"]).sort_values(by=\"Weights\",ascending=False).plot(kind=\"bar\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "3c878444",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import KFold\n",
    "\n",
    "from sklearn.linear_model import LinearRegression ,Lasso,Ridge,ElasticNet\n",
    "\n",
    "from sklearn.metrics import mean_squared_error\n",
    "\n",
    "#RMSE\n",
    "\n",
    "def rmse(y,yhat):\n",
    "    return(np.sqrt(mean_squared_error(y,yhat)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "0e8f4cdf",
   "metadata": {},
   "outputs": [],
   "source": [
    "lr=LinearRegression()\n",
    "ridge=Ridge(alpha=0.05)\n",
    "lasso=Lasso(alpha=0.05)\n",
    "enet=ElasticNet()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "c3061f20",
   "metadata": {},
   "outputs": [],
   "source": [
    "#KFold\n",
    "kfold=KFold(n_splits=5,shuffle=True,random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5b45cb7c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "402cf9fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Fit the models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "66856f86",
   "metadata": {},
   "outputs": [],
   "source": [
    "X=dummytrain.drop(\"Item_Outlet_Sales\",axis=1)\n",
    "y=dummytrain.Item_Outlet_Sales\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "c72af1ed",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      Item_Weight  Item_Visibility  Item_MRP  Outlet_Establishment_Year  \\\n",
      "0       -0.766364        -0.970732  1.747454                       1999   \n",
      "1       -1.494283        -0.908111 -1.489023                       2009   \n",
      "2        0.999593        -0.956917  0.010040                       1999   \n",
      "3        1.365706        -1.281758  0.660050                       1998   \n",
      "4       -0.846047        -1.281758 -1.399220                       1987   \n",
      "...           ...              ...       ...                        ...   \n",
      "8516     1.236490         1.018114 -1.320574                       2009   \n",
      "8517     1.699515         0.338688  0.607647                       1997   \n",
      "8518    -1.290767        -0.181193  1.180783                       1987   \n",
      "8520    -0.486395        -0.599784 -0.897208                       2004   \n",
      "8522     0.418119        -0.411936 -1.052261                       1997   \n",
      "\n",
      "      Outlet_Size  z_scaled  Item_Identifier_DRA24  Item_Identifier_DRA59  \\\n",
      "0               3  0.910601                  False                  False   \n",
      "1               3 -1.018440                  False                  False   \n",
      "2               3 -0.049238                  False                  False   \n",
      "3               2 -0.849103                  False                  False   \n",
      "4               1 -0.695373                  False                  False   \n",
      "...           ...       ...                    ...                    ...   \n",
      "8516            3 -0.774969                  False                  False   \n",
      "8517            2  0.836467                  False                  False   \n",
      "8518            1  0.349915                  False                  False   \n",
      "8520            2 -0.579100                  False                  False   \n",
      "8522            2 -0.829594                  False                  False   \n",
      "\n",
      "      Item_Identifier_DRB01  Item_Identifier_DRB13  ...  \\\n",
      "0                     False                  False  ...   \n",
      "1                     False                  False  ...   \n",
      "2                     False                  False  ...   \n",
      "3                     False                  False  ...   \n",
      "4                     False                  False  ...   \n",
      "...                     ...                    ...  ...   \n",
      "8516                  False                  False  ...   \n",
      "8517                  False                  False  ...   \n",
      "8518                  False                  False  ...   \n",
      "8520                  False                  False  ...   \n",
      "8522                  False                  False  ...   \n",
      "\n",
      "      Outlet_Identifier_OUT027  Outlet_Identifier_OUT035  \\\n",
      "0                        False                     False   \n",
      "1                        False                     False   \n",
      "2                        False                     False   \n",
      "3                        False                     False   \n",
      "4                        False                     False   \n",
      "...                        ...                       ...   \n",
      "8516                     False                     False   \n",
      "8517                     False                     False   \n",
      "8518                     False                     False   \n",
      "8520                     False                      True   \n",
      "8522                     False                     False   \n",
      "\n",
      "      Outlet_Identifier_OUT045  Outlet_Identifier_OUT046  \\\n",
      "0                        False                     False   \n",
      "1                        False                     False   \n",
      "2                        False                     False   \n",
      "3                        False                     False   \n",
      "4                        False                     False   \n",
      "...                        ...                       ...   \n",
      "8516                     False                     False   \n",
      "8517                     False                      True   \n",
      "8518                     False                     False   \n",
      "8520                     False                     False   \n",
      "8522                     False                      True   \n",
      "\n",
      "      Outlet_Identifier_OUT049  Outlet_Location_Type_Tier 2  \\\n",
      "0                         True                        False   \n",
      "1                        False                        False   \n",
      "2                         True                        False   \n",
      "3                        False                        False   \n",
      "4                        False                        False   \n",
      "...                        ...                          ...   \n",
      "8516                     False                        False   \n",
      "8517                     False                        False   \n",
      "8518                     False                        False   \n",
      "8520                     False                         True   \n",
      "8522                     False                        False   \n",
      "\n",
      "      Outlet_Location_Type_Tier 3  Outlet_Type_Supermarket Type1  \\\n",
      "0                           False                           True   \n",
      "1                            True                          False   \n",
      "2                           False                           True   \n",
      "3                            True                          False   \n",
      "4                            True                           True   \n",
      "...                           ...                            ...   \n",
      "8516                         True                          False   \n",
      "8517                        False                           True   \n",
      "8518                         True                           True   \n",
      "8520                        False                           True   \n",
      "8522                        False                           True   \n",
      "\n",
      "      Outlet_Type_Supermarket Type2  Outlet_Type_Supermarket Type3  \n",
      "0                             False                          False  \n",
      "1                              True                          False  \n",
      "2                             False                          False  \n",
      "3                             False                          False  \n",
      "4                             False                          False  \n",
      "...                             ...                            ...  \n",
      "8516                           True                          False  \n",
      "8517                          False                          False  \n",
      "8518                          False                          False  \n",
      "8520                          False                          False  \n",
      "8522                          False                          False  \n",
      "\n",
      "[6818 rows x 1594 columns]\n",
      "      Item_Weight  Item_Visibility  Item_MRP  Outlet_Establishment_Year  \\\n",
      "1       -1.494283        -0.908111 -1.489023                       2009   \n",
      "2        0.999593        -0.956917  0.010040                       1999   \n",
      "3        1.365706        -1.281758  0.660050                       1998   \n",
      "4       -0.846047        -1.281758 -1.399220                       1987   \n",
      "5       -0.530544        -1.281758 -1.438734                       2009   \n",
      "...           ...              ...       ...                        ...   \n",
      "8518    -1.290767        -0.181193  1.180783                       1987   \n",
      "8519    -0.964496        -0.371154 -0.527301                       2002   \n",
      "8520    -0.486395        -0.599784 -0.897208                       2004   \n",
      "8521    -1.216468         1.532880 -0.607977                       2009   \n",
      "8522     0.418119        -0.411936 -1.052261                       1997   \n",
      "\n",
      "      Outlet_Size  z_scaled  Item_Identifier_DRA24  Item_Identifier_DRA59  \\\n",
      "1               3 -1.018440                  False                  False   \n",
      "2               3 -0.049238                  False                  False   \n",
      "3               2 -0.849103                  False                  False   \n",
      "4               1 -0.695373                  False                  False   \n",
      "5               3 -0.952110                  False                  False   \n",
      "...           ...       ...                    ...                    ...   \n",
      "8518            1  0.349915                  False                  False   \n",
      "8519            2 -0.956402                  False                  False   \n",
      "8520            2 -0.579100                  False                  False   \n",
      "8521            3 -0.196725                  False                  False   \n",
      "8522            2 -0.829594                  False                  False   \n",
      "\n",
      "      Item_Identifier_DRB01  Item_Identifier_DRB13  ...  \\\n",
      "1                     False                  False  ...   \n",
      "2                     False                  False  ...   \n",
      "3                     False                  False  ...   \n",
      "4                     False                  False  ...   \n",
      "5                     False                  False  ...   \n",
      "...                     ...                    ...  ...   \n",
      "8518                  False                  False  ...   \n",
      "8519                  False                  False  ...   \n",
      "8520                  False                  False  ...   \n",
      "8521                  False                  False  ...   \n",
      "8522                  False                  False  ...   \n",
      "\n",
      "      Outlet_Identifier_OUT027  Outlet_Identifier_OUT035  \\\n",
      "1                        False                     False   \n",
      "2                        False                     False   \n",
      "3                        False                     False   \n",
      "4                        False                     False   \n",
      "5                        False                     False   \n",
      "...                        ...                       ...   \n",
      "8518                     False                     False   \n",
      "8519                     False                     False   \n",
      "8520                     False                      True   \n",
      "8521                     False                     False   \n",
      "8522                     False                     False   \n",
      "\n",
      "      Outlet_Identifier_OUT045  Outlet_Identifier_OUT046  \\\n",
      "1                        False                     False   \n",
      "2                        False                     False   \n",
      "3                        False                     False   \n",
      "4                        False                     False   \n",
      "5                        False                     False   \n",
      "...                        ...                       ...   \n",
      "8518                     False                     False   \n",
      "8519                      True                     False   \n",
      "8520                     False                     False   \n",
      "8521                     False                     False   \n",
      "8522                     False                      True   \n",
      "\n",
      "      Outlet_Identifier_OUT049  Outlet_Location_Type_Tier 2  \\\n",
      "1                        False                        False   \n",
      "2                         True                        False   \n",
      "3                        False                        False   \n",
      "4                        False                        False   \n",
      "5                        False                        False   \n",
      "...                        ...                          ...   \n",
      "8518                     False                        False   \n",
      "8519                     False                         True   \n",
      "8520                     False                         True   \n",
      "8521                     False                        False   \n",
      "8522                     False                        False   \n",
      "\n",
      "      Outlet_Location_Type_Tier 3  Outlet_Type_Supermarket Type1  \\\n",
      "1                            True                          False   \n",
      "2                           False                           True   \n",
      "3                            True                          False   \n",
      "4                            True                           True   \n",
      "5                            True                          False   \n",
      "...                           ...                            ...   \n",
      "8518                         True                           True   \n",
      "8519                        False                           True   \n",
      "8520                        False                           True   \n",
      "8521                         True                          False   \n",
      "8522                        False                           True   \n",
      "\n",
      "      Outlet_Type_Supermarket Type2  Outlet_Type_Supermarket Type3  \n",
      "1                              True                          False  \n",
      "2                             False                          False  \n",
      "3                             False                          False  \n",
      "4                             False                          False  \n",
      "5                              True                          False  \n",
      "...                             ...                            ...  \n",
      "8518                          False                          False  \n",
      "8519                          False                          False  \n",
      "8520                          False                          False  \n",
      "8521                           True                          False  \n",
      "8522                          False                          False  \n",
      "\n",
      "[6818 rows x 1594 columns]\n",
      "      Item_Weight  Item_Visibility  Item_MRP  Outlet_Establishment_Year  \\\n",
      "0       -0.766364        -0.970732  1.747454                       1999   \n",
      "1       -1.494283        -0.908111 -1.489023                       2009   \n",
      "2        0.999593        -0.956917  0.010040                       1999   \n",
      "3        1.365706        -1.281758  0.660050                       1998   \n",
      "4       -0.846047        -1.281758 -1.399220                       1987   \n",
      "...           ...              ...       ...                        ...   \n",
      "8518    -1.290767        -0.181193  1.180783                       1987   \n",
      "8519    -0.964496        -0.371154 -0.527301                       2002   \n",
      "8520    -0.486395        -0.599784 -0.897208                       2004   \n",
      "8521    -1.216468         1.532880 -0.607977                       2009   \n",
      "8522     0.418119        -0.411936 -1.052261                       1997   \n",
      "\n",
      "      Outlet_Size  z_scaled  Item_Identifier_DRA24  Item_Identifier_DRA59  \\\n",
      "0               3  0.910601                  False                  False   \n",
      "1               3 -1.018440                  False                  False   \n",
      "2               3 -0.049238                  False                  False   \n",
      "3               2 -0.849103                  False                  False   \n",
      "4               1 -0.695373                  False                  False   \n",
      "...           ...       ...                    ...                    ...   \n",
      "8518            1  0.349915                  False                  False   \n",
      "8519            2 -0.956402                  False                  False   \n",
      "8520            2 -0.579100                  False                  False   \n",
      "8521            3 -0.196725                  False                  False   \n",
      "8522            2 -0.829594                  False                  False   \n",
      "\n",
      "      Item_Identifier_DRB01  Item_Identifier_DRB13  ...  \\\n",
      "0                     False                  False  ...   \n",
      "1                     False                  False  ...   \n",
      "2                     False                  False  ...   \n",
      "3                     False                  False  ...   \n",
      "4                     False                  False  ...   \n",
      "...                     ...                    ...  ...   \n",
      "8518                  False                  False  ...   \n",
      "8519                  False                  False  ...   \n",
      "8520                  False                  False  ...   \n",
      "8521                  False                  False  ...   \n",
      "8522                  False                  False  ...   \n",
      "\n",
      "      Outlet_Identifier_OUT027  Outlet_Identifier_OUT035  \\\n",
      "0                        False                     False   \n",
      "1                        False                     False   \n",
      "2                        False                     False   \n",
      "3                        False                     False   \n",
      "4                        False                     False   \n",
      "...                        ...                       ...   \n",
      "8518                     False                     False   \n",
      "8519                     False                     False   \n",
      "8520                     False                      True   \n",
      "8521                     False                     False   \n",
      "8522                     False                     False   \n",
      "\n",
      "      Outlet_Identifier_OUT045  Outlet_Identifier_OUT046  \\\n",
      "0                        False                     False   \n",
      "1                        False                     False   \n",
      "2                        False                     False   \n",
      "3                        False                     False   \n",
      "4                        False                     False   \n",
      "...                        ...                       ...   \n",
      "8518                     False                     False   \n",
      "8519                      True                     False   \n",
      "8520                     False                     False   \n",
      "8521                     False                     False   \n",
      "8522                     False                      True   \n",
      "\n",
      "      Outlet_Identifier_OUT049  Outlet_Location_Type_Tier 2  \\\n",
      "0                         True                        False   \n",
      "1                        False                        False   \n",
      "2                         True                        False   \n",
      "3                        False                        False   \n",
      "4                        False                        False   \n",
      "...                        ...                          ...   \n",
      "8518                     False                        False   \n",
      "8519                     False                         True   \n",
      "8520                     False                         True   \n",
      "8521                     False                        False   \n",
      "8522                     False                        False   \n",
      "\n",
      "      Outlet_Location_Type_Tier 3  Outlet_Type_Supermarket Type1  \\\n",
      "0                           False                           True   \n",
      "1                            True                          False   \n",
      "2                           False                           True   \n",
      "3                            True                          False   \n",
      "4                            True                           True   \n",
      "...                           ...                            ...   \n",
      "8518                         True                           True   \n",
      "8519                        False                           True   \n",
      "8520                        False                           True   \n",
      "8521                         True                          False   \n",
      "8522                        False                           True   \n",
      "\n",
      "      Outlet_Type_Supermarket Type2  Outlet_Type_Supermarket Type3  \n",
      "0                             False                          False  \n",
      "1                              True                          False  \n",
      "2                             False                          False  \n",
      "3                             False                          False  \n",
      "4                             False                          False  \n",
      "...                             ...                            ...  \n",
      "8518                          False                          False  \n",
      "8519                          False                          False  \n",
      "8520                          False                          False  \n",
      "8521                           True                          False  \n",
      "8522                          False                          False  \n",
      "\n",
      "[6818 rows x 1594 columns]\n",
      "      Item_Weight  Item_Visibility  Item_MRP  Outlet_Establishment_Year  \\\n",
      "0       -0.766364        -0.970732  1.747454                       1999   \n",
      "3        1.365706        -1.281758  0.660050                       1998   \n",
      "4       -0.846047        -1.281758 -1.399220                       1987   \n",
      "5       -0.530544        -1.281758 -1.438734                       2009   \n",
      "6        0.170455        -1.034813 -1.338238                       1987   \n",
      "...           ...              ...       ...                        ...   \n",
      "8515     1.688747        -0.864692  0.265547                       2009   \n",
      "8516     1.236490         1.018114 -1.320574                       2009   \n",
      "8517     1.699515         0.338688  0.607647                       1997   \n",
      "8519    -0.964496        -0.371154 -0.527301                       2002   \n",
      "8521    -1.216468         1.532880 -0.607977                       2009   \n",
      "\n",
      "      Outlet_Size  z_scaled  Item_Identifier_DRA24  Item_Identifier_DRA59  \\\n",
      "0               3  0.910601                  False                  False   \n",
      "3               2 -0.849103                  False                  False   \n",
      "4               1 -0.695373                  False                  False   \n",
      "5               3 -0.952110                  False                  False   \n",
      "6               1 -1.076967                  False                  False   \n",
      "...           ...       ...                    ...                    ...   \n",
      "8515            3 -0.357478                  False                  False   \n",
      "8516            3 -0.774969                  False                  False   \n",
      "8517            2  0.836467                  False                  False   \n",
      "8519            2 -0.956402                  False                  False   \n",
      "8521            3 -0.196725                  False                  False   \n",
      "\n",
      "      Item_Identifier_DRB01  Item_Identifier_DRB13  ...  \\\n",
      "0                     False                  False  ...   \n",
      "3                     False                  False  ...   \n",
      "4                     False                  False  ...   \n",
      "5                     False                  False  ...   \n",
      "6                     False                  False  ...   \n",
      "...                     ...                    ...  ...   \n",
      "8515                  False                  False  ...   \n",
      "8516                  False                  False  ...   \n",
      "8517                  False                  False  ...   \n",
      "8519                  False                  False  ...   \n",
      "8521                  False                  False  ...   \n",
      "\n",
      "      Outlet_Identifier_OUT027  Outlet_Identifier_OUT035  \\\n",
      "0                        False                     False   \n",
      "3                        False                     False   \n",
      "4                        False                     False   \n",
      "5                        False                     False   \n",
      "6                        False                     False   \n",
      "...                        ...                       ...   \n",
      "8515                     False                     False   \n",
      "8516                     False                     False   \n",
      "8517                     False                     False   \n",
      "8519                     False                     False   \n",
      "8521                     False                     False   \n",
      "\n",
      "      Outlet_Identifier_OUT045  Outlet_Identifier_OUT046  \\\n",
      "0                        False                     False   \n",
      "3                        False                     False   \n",
      "4                        False                     False   \n",
      "5                        False                     False   \n",
      "6                        False                     False   \n",
      "...                        ...                       ...   \n",
      "8515                     False                     False   \n",
      "8516                     False                     False   \n",
      "8517                     False                      True   \n",
      "8519                      True                     False   \n",
      "8521                     False                     False   \n",
      "\n",
      "      Outlet_Identifier_OUT049  Outlet_Location_Type_Tier 2  \\\n",
      "0                         True                        False   \n",
      "3                        False                        False   \n",
      "4                        False                        False   \n",
      "5                        False                        False   \n",
      "6                        False                        False   \n",
      "...                        ...                          ...   \n",
      "8515                     False                        False   \n",
      "8516                     False                        False   \n",
      "8517                     False                        False   \n",
      "8519                     False                         True   \n",
      "8521                     False                        False   \n",
      "\n",
      "      Outlet_Location_Type_Tier 3  Outlet_Type_Supermarket Type1  \\\n",
      "0                           False                           True   \n",
      "3                            True                          False   \n",
      "4                            True                           True   \n",
      "5                            True                          False   \n",
      "6                            True                           True   \n",
      "...                           ...                            ...   \n",
      "8515                         True                          False   \n",
      "8516                         True                          False   \n",
      "8517                        False                           True   \n",
      "8519                        False                           True   \n",
      "8521                         True                          False   \n",
      "\n",
      "      Outlet_Type_Supermarket Type2  Outlet_Type_Supermarket Type3  \n",
      "0                             False                          False  \n",
      "3                             False                          False  \n",
      "4                             False                          False  \n",
      "5                              True                          False  \n",
      "6                             False                          False  \n",
      "...                             ...                            ...  \n",
      "8515                           True                          False  \n",
      "8516                           True                          False  \n",
      "8517                          False                          False  \n",
      "8519                          False                          False  \n",
      "8521                           True                          False  \n",
      "\n",
      "[6819 rows x 1594 columns]\n",
      "      Item_Weight  Item_Visibility  Item_MRP  Outlet_Establishment_Year  \\\n",
      "0       -0.766364        -0.970732  1.747454                       1999   \n",
      "1       -1.494283        -0.908111 -1.489023                       2009   \n",
      "2        0.999593        -0.956917  0.010040                       1999   \n",
      "6        0.170455        -1.034813 -1.338238                       1987   \n",
      "7        1.322634         1.188838 -0.533641                       1985   \n",
      "...           ...              ...       ...                        ...   \n",
      "8518    -1.290767        -0.181193  1.180783                       1987   \n",
      "8519    -0.964496        -0.371154 -0.527301                       2002   \n",
      "8520    -0.486395        -0.599784 -0.897208                       2004   \n",
      "8521    -1.216468         1.532880 -0.607977                       2009   \n",
      "8522     0.418119        -0.411936 -1.052261                       1997   \n",
      "\n",
      "      Outlet_Size  z_scaled  Item_Identifier_DRA24  Item_Identifier_DRA59  \\\n",
      "0               3  0.910601                  False                  False   \n",
      "1               3 -1.018440                  False                  False   \n",
      "2               3 -0.049238                  False                  False   \n",
      "6               1 -1.076967                  False                  False   \n",
      "7               3  1.079158                  False                  False   \n",
      "...           ...       ...                    ...                    ...   \n",
      "8518            1  0.349915                  False                  False   \n",
      "8519            2 -0.956402                  False                  False   \n",
      "8520            2 -0.579100                  False                  False   \n",
      "8521            3 -0.196725                  False                  False   \n",
      "8522            2 -0.829594                  False                  False   \n",
      "\n",
      "      Item_Identifier_DRB01  Item_Identifier_DRB13  ...  \\\n",
      "0                     False                  False  ...   \n",
      "1                     False                  False  ...   \n",
      "2                     False                  False  ...   \n",
      "6                     False                  False  ...   \n",
      "7                     False                  False  ...   \n",
      "...                     ...                    ...  ...   \n",
      "8518                  False                  False  ...   \n",
      "8519                  False                  False  ...   \n",
      "8520                  False                  False  ...   \n",
      "8521                  False                  False  ...   \n",
      "8522                  False                  False  ...   \n",
      "\n",
      "      Outlet_Identifier_OUT027  Outlet_Identifier_OUT035  \\\n",
      "0                        False                     False   \n",
      "1                        False                     False   \n",
      "2                        False                     False   \n",
      "6                        False                     False   \n",
      "7                         True                     False   \n",
      "...                        ...                       ...   \n",
      "8518                     False                     False   \n",
      "8519                     False                     False   \n",
      "8520                     False                      True   \n",
      "8521                     False                     False   \n",
      "8522                     False                     False   \n",
      "\n",
      "      Outlet_Identifier_OUT045  Outlet_Identifier_OUT046  \\\n",
      "0                        False                     False   \n",
      "1                        False                     False   \n",
      "2                        False                     False   \n",
      "6                        False                     False   \n",
      "7                        False                     False   \n",
      "...                        ...                       ...   \n",
      "8518                     False                     False   \n",
      "8519                      True                     False   \n",
      "8520                     False                     False   \n",
      "8521                     False                     False   \n",
      "8522                     False                      True   \n",
      "\n",
      "      Outlet_Identifier_OUT049  Outlet_Location_Type_Tier 2  \\\n",
      "0                         True                        False   \n",
      "1                        False                        False   \n",
      "2                         True                        False   \n",
      "6                        False                        False   \n",
      "7                        False                        False   \n",
      "...                        ...                          ...   \n",
      "8518                     False                        False   \n",
      "8519                     False                         True   \n",
      "8520                     False                         True   \n",
      "8521                     False                        False   \n",
      "8522                     False                        False   \n",
      "\n",
      "      Outlet_Location_Type_Tier 3  Outlet_Type_Supermarket Type1  \\\n",
      "0                           False                           True   \n",
      "1                            True                          False   \n",
      "2                           False                           True   \n",
      "6                            True                           True   \n",
      "7                            True                          False   \n",
      "...                           ...                            ...   \n",
      "8518                         True                           True   \n",
      "8519                        False                           True   \n",
      "8520                        False                           True   \n",
      "8521                         True                          False   \n",
      "8522                        False                           True   \n",
      "\n",
      "      Outlet_Type_Supermarket Type2  Outlet_Type_Supermarket Type3  \n",
      "0                             False                          False  \n",
      "1                              True                          False  \n",
      "2                             False                          False  \n",
      "6                             False                          False  \n",
      "7                             False                           True  \n",
      "...                             ...                            ...  \n",
      "8518                          False                          False  \n",
      "8519                          False                          False  \n",
      "8520                          False                          False  \n",
      "8521                           True                          False  \n",
      "8522                          False                          False  \n",
      "\n",
      "[6819 rows x 1594 columns]\n"
     ]
    }
   ],
   "source": [
    "for train_index,test_index in kfold.split(X,y):\n",
    "    print(X.iloc[train_index])\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "c8452f05",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'xtrain' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[148], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m yhat\u001b[38;5;241m=\u001b[39mlr\u001b[38;5;241m.\u001b[39mfit(xtrain,ytrain)\u001b[38;5;241m.\u001b[39mpredict(xtest)\n\u001b[0;32m      2\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mRMSE\u001b[39m\u001b[38;5;124m\"\u001b[39m,rmse(ytest\u001b[38;5;241m.\u001b[39myhat))\n",
      "\u001b[1;31mNameError\u001b[0m: name 'xtrain' is not defined"
     ]
    }
   ],
   "source": [
    "yhat=lr.fit(xtrain,ytrain).predict(xtest)\n",
    "print(\"RMSE\",rmse(ytest.yhat))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "5ade6c02",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'LinearRegression' object has no attribute 'coef_'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[140], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m coeff\u001b[38;5;241m=\u001b[39mpd\u001b[38;5;241m.\u001b[39mDataFrame(lr\u001b[38;5;241m.\u001b[39mcoef_,index\u001b[38;5;241m=\u001b[39mlr\u001b[38;5;241m.\u001b[39mfeature_names_in_,columns\u001b[38;5;241m=\u001b[39m[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mWeights\u001b[39m\u001b[38;5;124m\"\u001b[39m])\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'LinearRegression' object has no attribute 'coef_'"
     ]
    }
   ],
   "source": [
    "coeff=pd.DataFrame(lr.coef_,index=lr.feature_names_in_,columns=[\"Weights\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "55eb206f",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'coeff' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[141], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m coeff\u001b[38;5;241m.\u001b[39msort_values(by\u001b[38;5;241m=\u001b[39mWeights,ascending\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m)\u001b[38;5;241m.\u001b[39mplot(kind\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mbar\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "\u001b[1;31mNameError\u001b[0m: name 'coeff' is not defined"
     ]
    }
   ],
   "source": [
    "coeff.sort_values(by=Weights,ascending=False).plot(kind=\"bar\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "60fe6b78",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "11060f58",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "82fce3b0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e7e73a04",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
